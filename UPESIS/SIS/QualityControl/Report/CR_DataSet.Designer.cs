//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3053
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace SIS.QualityControl.Report {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("CR_DataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class CR_DataSet : global::System.Data.DataSet {
        
        private SternumDataTable tableSternum;
        
        private KnuckleDataTable tableKnuckle;
        
        private IVPDataTable tableIVP;
        
        private UGIDataTable tableUGI;
        
        private CTDataTable tableCT;
        
        private MRIDataTable tableMRI;
        
        private DEPT_MAN_DICTDataTable tableDEPT_MAN_DICT;
        
        private RY_DIAG_DICTDataTable tableRY_DIAG_DICT;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public CR_DataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected CR_DataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Sternum"] != null)) {
                    base.Tables.Add(new SternumDataTable(ds.Tables["Sternum"]));
                }
                if ((ds.Tables["Knuckle"] != null)) {
                    base.Tables.Add(new KnuckleDataTable(ds.Tables["Knuckle"]));
                }
                if ((ds.Tables["IVP"] != null)) {
                    base.Tables.Add(new IVPDataTable(ds.Tables["IVP"]));
                }
                if ((ds.Tables["UGI"] != null)) {
                    base.Tables.Add(new UGIDataTable(ds.Tables["UGI"]));
                }
                if ((ds.Tables["CT"] != null)) {
                    base.Tables.Add(new CTDataTable(ds.Tables["CT"]));
                }
                if ((ds.Tables["MRI"] != null)) {
                    base.Tables.Add(new MRIDataTable(ds.Tables["MRI"]));
                }
                if ((ds.Tables["DEPT_MAN_DICT"] != null)) {
                    base.Tables.Add(new DEPT_MAN_DICTDataTable(ds.Tables["DEPT_MAN_DICT"]));
                }
                if ((ds.Tables["RY_DIAG_DICT"] != null)) {
                    base.Tables.Add(new RY_DIAG_DICTDataTable(ds.Tables["RY_DIAG_DICT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SternumDataTable Sternum {
            get {
                return this.tableSternum;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public KnuckleDataTable Knuckle {
            get {
                return this.tableKnuckle;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public IVPDataTable IVP {
            get {
                return this.tableIVP;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public UGIDataTable UGI {
            get {
                return this.tableUGI;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public CTDataTable CT {
            get {
                return this.tableCT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MRIDataTable MRI {
            get {
                return this.tableMRI;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DEPT_MAN_DICTDataTable DEPT_MAN_DICT {
            get {
                return this.tableDEPT_MAN_DICT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public RY_DIAG_DICTDataTable RY_DIAG_DICT {
            get {
                return this.tableRY_DIAG_DICT;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            CR_DataSet cln = ((CR_DataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Sternum"] != null)) {
                    base.Tables.Add(new SternumDataTable(ds.Tables["Sternum"]));
                }
                if ((ds.Tables["Knuckle"] != null)) {
                    base.Tables.Add(new KnuckleDataTable(ds.Tables["Knuckle"]));
                }
                if ((ds.Tables["IVP"] != null)) {
                    base.Tables.Add(new IVPDataTable(ds.Tables["IVP"]));
                }
                if ((ds.Tables["UGI"] != null)) {
                    base.Tables.Add(new UGIDataTable(ds.Tables["UGI"]));
                }
                if ((ds.Tables["CT"] != null)) {
                    base.Tables.Add(new CTDataTable(ds.Tables["CT"]));
                }
                if ((ds.Tables["MRI"] != null)) {
                    base.Tables.Add(new MRIDataTable(ds.Tables["MRI"]));
                }
                if ((ds.Tables["DEPT_MAN_DICT"] != null)) {
                    base.Tables.Add(new DEPT_MAN_DICTDataTable(ds.Tables["DEPT_MAN_DICT"]));
                }
                if ((ds.Tables["RY_DIAG_DICT"] != null)) {
                    base.Tables.Add(new RY_DIAG_DICTDataTable(ds.Tables["RY_DIAG_DICT"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSternum = ((SternumDataTable)(base.Tables["Sternum"]));
            if ((initTable == true)) {
                if ((this.tableSternum != null)) {
                    this.tableSternum.InitVars();
                }
            }
            this.tableKnuckle = ((KnuckleDataTable)(base.Tables["Knuckle"]));
            if ((initTable == true)) {
                if ((this.tableKnuckle != null)) {
                    this.tableKnuckle.InitVars();
                }
            }
            this.tableIVP = ((IVPDataTable)(base.Tables["IVP"]));
            if ((initTable == true)) {
                if ((this.tableIVP != null)) {
                    this.tableIVP.InitVars();
                }
            }
            this.tableUGI = ((UGIDataTable)(base.Tables["UGI"]));
            if ((initTable == true)) {
                if ((this.tableUGI != null)) {
                    this.tableUGI.InitVars();
                }
            }
            this.tableCT = ((CTDataTable)(base.Tables["CT"]));
            if ((initTable == true)) {
                if ((this.tableCT != null)) {
                    this.tableCT.InitVars();
                }
            }
            this.tableMRI = ((MRIDataTable)(base.Tables["MRI"]));
            if ((initTable == true)) {
                if ((this.tableMRI != null)) {
                    this.tableMRI.InitVars();
                }
            }
            this.tableDEPT_MAN_DICT = ((DEPT_MAN_DICTDataTable)(base.Tables["DEPT_MAN_DICT"]));
            if ((initTable == true)) {
                if ((this.tableDEPT_MAN_DICT != null)) {
                    this.tableDEPT_MAN_DICT.InitVars();
                }
            }
            this.tableRY_DIAG_DICT = ((RY_DIAG_DICTDataTable)(base.Tables["RY_DIAG_DICT"]));
            if ((initTable == true)) {
                if ((this.tableRY_DIAG_DICT != null)) {
                    this.tableRY_DIAG_DICT.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "CR_DataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/CR_DataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSternum = new SternumDataTable();
            base.Tables.Add(this.tableSternum);
            this.tableKnuckle = new KnuckleDataTable();
            base.Tables.Add(this.tableKnuckle);
            this.tableIVP = new IVPDataTable();
            base.Tables.Add(this.tableIVP);
            this.tableUGI = new UGIDataTable();
            base.Tables.Add(this.tableUGI);
            this.tableCT = new CTDataTable();
            base.Tables.Add(this.tableCT);
            this.tableMRI = new MRIDataTable();
            base.Tables.Add(this.tableMRI);
            this.tableDEPT_MAN_DICT = new DEPT_MAN_DICTDataTable();
            base.Tables.Add(this.tableDEPT_MAN_DICT);
            this.tableRY_DIAG_DICT = new RY_DIAG_DICTDataTable();
            base.Tables.Add(this.tableRY_DIAG_DICT);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSternum() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeKnuckle() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeIVP() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUGI() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeCT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMRI() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDEPT_MAN_DICT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRY_DIAG_DICT() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            CR_DataSet ds = new CR_DataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SternumRowChangeEventHandler(object sender, SternumRowChangeEvent e);
        
        public delegate void KnuckleRowChangeEventHandler(object sender, KnuckleRowChangeEvent e);
        
        public delegate void IVPRowChangeEventHandler(object sender, IVPRowChangeEvent e);
        
        public delegate void UGIRowChangeEventHandler(object sender, UGIRowChangeEvent e);
        
        public delegate void CTRowChangeEventHandler(object sender, CTRowChangeEvent e);
        
        public delegate void MRIRowChangeEventHandler(object sender, MRIRowChangeEvent e);
        
        public delegate void DEPT_MAN_DICTRowChangeEventHandler(object sender, DEPT_MAN_DICTRowChangeEvent e);
        
        public delegate void RY_DIAG_DICTRowChangeEventHandler(object sender, RY_DIAG_DICTRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SternumDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEXAM_ACCESSION_NUM;
            
            private global::System.Data.DataColumn columnPATIENT_LOCAL_ID;
            
            private global::System.Data.DataColumn columnQC_DATE;
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnPATIENT_NAME;
            
            private global::System.Data.DataColumn columnPATIENT_SEX;
            
            private global::System.Data.DataColumn columnSTUDY_DATE_TIME;
            
            private global::System.Data.DataColumn columnSTERNUM_BREAST;
            
            private global::System.Data.DataColumn columnSTERNUM_BLADEBONE;
            
            private global::System.Data.DataColumn columnSTERNUM_BOARD;
            
            private global::System.Data.DataColumn columnSTERNUM_IMAGE_DISTORTION;
            
            private global::System.Data.DataColumn columnSTERNUM_ARRANGEMENT_FOCUS;
            
            private global::System.Data.DataColumn columnSTERNUM_FIRST_FORTH_WHETTLE;
            
            private global::System.Data.DataColumn columnSTERNUM_LETTER_NO;
            
            private global::System.Data.DataColumn columnSTERNUM_LETTER_ARRANGE;
            
            private global::System.Data.DataColumn columnBASE_ASH_FOG_VALUE;
            
            private global::System.Data.DataColumn columnDIAGNOSE_AREA_VALUE;
            
            private global::System.Data.DataColumn columnBLANK_EXPOSAL_DENSITY;
            
            private global::System.Data.DataColumn columnDIRT;
            
            private global::System.Data.DataColumn columnNICK;
            
            private global::System.Data.DataColumn columnADHIBIT;
            
            private global::System.Data.DataColumn columnWATER_MARK;
            
            private global::System.Data.DataColumn columnFINGER_MARK;
            
            private global::System.Data.DataColumn columnLIGHT_LEAK;
            
            private global::System.Data.DataColumn columnSTATIC_SHADOW;
            
            private global::System.Data.DataColumn columnEXTERNA_SHADOW;
            
            private global::System.Data.DataColumn columnTOTAL_SCORE;
            
            private global::System.Data.DataColumn columnDISTINCTION;
            
            private global::System.Data.DataColumn columnNUMBER_KEY;
            
            private global::System.Data.DataColumn columnD_STERNUM_ARRANGEMENT_FOCUS;
            
            private global::System.Data.DataColumn columnD_STERNUM_LUNG_MARKINGS;
            
            private global::System.Data.DataColumn columnD_EXPOSURE_DOSE;
            
            private global::System.Data.DataColumn columnD_FLAG_CONTENT;
            
            private global::System.Data.DataColumn columnD_FLAG_PLACE_ARRANGE;
            
            private global::System.Data.DataColumn columnD_DEVICE_SHADOW;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SternumDataTable() {
                this.TableName = "Sternum";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SternumDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SternumDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_ACCESSION_NUMColumn {
                get {
                    return this.columnEXAM_ACCESSION_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_LOCAL_IDColumn {
                get {
                    return this.columnPATIENT_LOCAL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QC_DATEColumn {
                get {
                    return this.columnQC_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMEColumn {
                get {
                    return this.columnPATIENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_SEXColumn {
                get {
                    return this.columnPATIENT_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STUDY_DATE_TIMEColumn {
                get {
                    return this.columnSTUDY_DATE_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STERNUM_BREASTColumn {
                get {
                    return this.columnSTERNUM_BREAST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STERNUM_BLADEBONEColumn {
                get {
                    return this.columnSTERNUM_BLADEBONE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STERNUM_BOARDColumn {
                get {
                    return this.columnSTERNUM_BOARD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STERNUM_IMAGE_DISTORTIONColumn {
                get {
                    return this.columnSTERNUM_IMAGE_DISTORTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STERNUM_ARRANGEMENT_FOCUSColumn {
                get {
                    return this.columnSTERNUM_ARRANGEMENT_FOCUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STERNUM_FIRST_FORTH_WHETTLEColumn {
                get {
                    return this.columnSTERNUM_FIRST_FORTH_WHETTLE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STERNUM_LETTER_NOColumn {
                get {
                    return this.columnSTERNUM_LETTER_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STERNUM_LETTER_ARRANGEColumn {
                get {
                    return this.columnSTERNUM_LETTER_ARRANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BASE_ASH_FOG_VALUEColumn {
                get {
                    return this.columnBASE_ASH_FOG_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIAGNOSE_AREA_VALUEColumn {
                get {
                    return this.columnDIAGNOSE_AREA_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLANK_EXPOSAL_DENSITYColumn {
                get {
                    return this.columnBLANK_EXPOSAL_DENSITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIRTColumn {
                get {
                    return this.columnDIRT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NICKColumn {
                get {
                    return this.columnNICK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADHIBITColumn {
                get {
                    return this.columnADHIBIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WATER_MARKColumn {
                get {
                    return this.columnWATER_MARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINGER_MARKColumn {
                get {
                    return this.columnFINGER_MARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIGHT_LEAKColumn {
                get {
                    return this.columnLIGHT_LEAK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATIC_SHADOWColumn {
                get {
                    return this.columnSTATIC_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXTERNA_SHADOWColumn {
                get {
                    return this.columnEXTERNA_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_SCOREColumn {
                get {
                    return this.columnTOTAL_SCORE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISTINCTIONColumn {
                get {
                    return this.columnDISTINCTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBER_KEYColumn {
                get {
                    return this.columnNUMBER_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_STERNUM_ARRANGEMENT_FOCUSColumn {
                get {
                    return this.columnD_STERNUM_ARRANGEMENT_FOCUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_STERNUM_LUNG_MARKINGSColumn {
                get {
                    return this.columnD_STERNUM_LUNG_MARKINGS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_EXPOSURE_DOSEColumn {
                get {
                    return this.columnD_EXPOSURE_DOSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_FLAG_CONTENTColumn {
                get {
                    return this.columnD_FLAG_CONTENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_FLAG_PLACE_ARRANGEColumn {
                get {
                    return this.columnD_FLAG_PLACE_ARRANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_DEVICE_SHADOWColumn {
                get {
                    return this.columnD_DEVICE_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SternumRow this[int index] {
                get {
                    return ((SternumRow)(this.Rows[index]));
                }
            }
            
            public event SternumRowChangeEventHandler SternumRowChanging;
            
            public event SternumRowChangeEventHandler SternumRowChanged;
            
            public event SternumRowChangeEventHandler SternumRowDeleting;
            
            public event SternumRowChangeEventHandler SternumRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSternumRow(SternumRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SternumRow AddSternumRow(
                        string EXAM_ACCESSION_NUM, 
                        string PATIENT_LOCAL_ID, 
                        string QC_DATE, 
                        string PATIENT_ID, 
                        string PATIENT_NAME, 
                        string PATIENT_SEX, 
                        string STUDY_DATE_TIME, 
                        string STERNUM_BREAST, 
                        string STERNUM_BLADEBONE, 
                        string STERNUM_BOARD, 
                        string STERNUM_IMAGE_DISTORTION, 
                        string STERNUM_ARRANGEMENT_FOCUS, 
                        string STERNUM_FIRST_FORTH_WHETTLE, 
                        string STERNUM_LETTER_NO, 
                        string STERNUM_LETTER_ARRANGE, 
                        string BASE_ASH_FOG_VALUE, 
                        string DIAGNOSE_AREA_VALUE, 
                        string BLANK_EXPOSAL_DENSITY, 
                        string DIRT, 
                        string NICK, 
                        string ADHIBIT, 
                        string WATER_MARK, 
                        string FINGER_MARK, 
                        string LIGHT_LEAK, 
                        string STATIC_SHADOW, 
                        string EXTERNA_SHADOW, 
                        string TOTAL_SCORE, 
                        string DISTINCTION, 
                        string NUMBER_KEY, 
                        string D_STERNUM_ARRANGEMENT_FOCUS, 
                        string D_STERNUM_LUNG_MARKINGS, 
                        string D_EXPOSURE_DOSE, 
                        string D_FLAG_CONTENT, 
                        string D_FLAG_PLACE_ARRANGE, 
                        string D_DEVICE_SHADOW) {
                SternumRow rowSternumRow = ((SternumRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EXAM_ACCESSION_NUM,
                        PATIENT_LOCAL_ID,
                        QC_DATE,
                        PATIENT_ID,
                        PATIENT_NAME,
                        PATIENT_SEX,
                        STUDY_DATE_TIME,
                        STERNUM_BREAST,
                        STERNUM_BLADEBONE,
                        STERNUM_BOARD,
                        STERNUM_IMAGE_DISTORTION,
                        STERNUM_ARRANGEMENT_FOCUS,
                        STERNUM_FIRST_FORTH_WHETTLE,
                        STERNUM_LETTER_NO,
                        STERNUM_LETTER_ARRANGE,
                        BASE_ASH_FOG_VALUE,
                        DIAGNOSE_AREA_VALUE,
                        BLANK_EXPOSAL_DENSITY,
                        DIRT,
                        NICK,
                        ADHIBIT,
                        WATER_MARK,
                        FINGER_MARK,
                        LIGHT_LEAK,
                        STATIC_SHADOW,
                        EXTERNA_SHADOW,
                        TOTAL_SCORE,
                        DISTINCTION,
                        NUMBER_KEY,
                        D_STERNUM_ARRANGEMENT_FOCUS,
                        D_STERNUM_LUNG_MARKINGS,
                        D_EXPOSURE_DOSE,
                        D_FLAG_CONTENT,
                        D_FLAG_PLACE_ARRANGE,
                        D_DEVICE_SHADOW};
                rowSternumRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSternumRow);
                return rowSternumRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SternumDataTable cln = ((SternumDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SternumDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEXAM_ACCESSION_NUM = base.Columns["EXAM_ACCESSION_NUM"];
                this.columnPATIENT_LOCAL_ID = base.Columns["PATIENT_LOCAL_ID"];
                this.columnQC_DATE = base.Columns["QC_DATE"];
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnPATIENT_NAME = base.Columns["PATIENT_NAME"];
                this.columnPATIENT_SEX = base.Columns["PATIENT_SEX"];
                this.columnSTUDY_DATE_TIME = base.Columns["STUDY_DATE_TIME"];
                this.columnSTERNUM_BREAST = base.Columns["STERNUM_BREAST"];
                this.columnSTERNUM_BLADEBONE = base.Columns["STERNUM_BLADEBONE"];
                this.columnSTERNUM_BOARD = base.Columns["STERNUM_BOARD"];
                this.columnSTERNUM_IMAGE_DISTORTION = base.Columns["STERNUM_IMAGE_DISTORTION"];
                this.columnSTERNUM_ARRANGEMENT_FOCUS = base.Columns["STERNUM_ARRANGEMENT_FOCUS"];
                this.columnSTERNUM_FIRST_FORTH_WHETTLE = base.Columns["STERNUM_FIRST_FORTH_WHETTLE"];
                this.columnSTERNUM_LETTER_NO = base.Columns["STERNUM_LETTER_NO"];
                this.columnSTERNUM_LETTER_ARRANGE = base.Columns["STERNUM_LETTER_ARRANGE"];
                this.columnBASE_ASH_FOG_VALUE = base.Columns["BASE_ASH_FOG_VALUE"];
                this.columnDIAGNOSE_AREA_VALUE = base.Columns["DIAGNOSE_AREA_VALUE"];
                this.columnBLANK_EXPOSAL_DENSITY = base.Columns["BLANK_EXPOSAL_DENSITY"];
                this.columnDIRT = base.Columns["DIRT"];
                this.columnNICK = base.Columns["NICK"];
                this.columnADHIBIT = base.Columns["ADHIBIT"];
                this.columnWATER_MARK = base.Columns["WATER_MARK"];
                this.columnFINGER_MARK = base.Columns["FINGER_MARK"];
                this.columnLIGHT_LEAK = base.Columns["LIGHT_LEAK"];
                this.columnSTATIC_SHADOW = base.Columns["STATIC_SHADOW"];
                this.columnEXTERNA_SHADOW = base.Columns["EXTERNA_SHADOW"];
                this.columnTOTAL_SCORE = base.Columns["TOTAL_SCORE"];
                this.columnDISTINCTION = base.Columns["DISTINCTION"];
                this.columnNUMBER_KEY = base.Columns["NUMBER_KEY"];
                this.columnD_STERNUM_ARRANGEMENT_FOCUS = base.Columns["D_STERNUM_ARRANGEMENT_FOCUS"];
                this.columnD_STERNUM_LUNG_MARKINGS = base.Columns["D_STERNUM_LUNG_MARKINGS"];
                this.columnD_EXPOSURE_DOSE = base.Columns["D_EXPOSURE_DOSE"];
                this.columnD_FLAG_CONTENT = base.Columns["D_FLAG_CONTENT"];
                this.columnD_FLAG_PLACE_ARRANGE = base.Columns["D_FLAG_PLACE_ARRANGE"];
                this.columnD_DEVICE_SHADOW = base.Columns["D_DEVICE_SHADOW"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEXAM_ACCESSION_NUM = new global::System.Data.DataColumn("EXAM_ACCESSION_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_ACCESSION_NUM);
                this.columnPATIENT_LOCAL_ID = new global::System.Data.DataColumn("PATIENT_LOCAL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_LOCAL_ID);
                this.columnQC_DATE = new global::System.Data.DataColumn("QC_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQC_DATE);
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnPATIENT_NAME = new global::System.Data.DataColumn("PATIENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAME);
                this.columnPATIENT_SEX = new global::System.Data.DataColumn("PATIENT_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_SEX);
                this.columnSTUDY_DATE_TIME = new global::System.Data.DataColumn("STUDY_DATE_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTUDY_DATE_TIME);
                this.columnSTERNUM_BREAST = new global::System.Data.DataColumn("STERNUM_BREAST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTERNUM_BREAST);
                this.columnSTERNUM_BLADEBONE = new global::System.Data.DataColumn("STERNUM_BLADEBONE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTERNUM_BLADEBONE);
                this.columnSTERNUM_BOARD = new global::System.Data.DataColumn("STERNUM_BOARD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTERNUM_BOARD);
                this.columnSTERNUM_IMAGE_DISTORTION = new global::System.Data.DataColumn("STERNUM_IMAGE_DISTORTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTERNUM_IMAGE_DISTORTION);
                this.columnSTERNUM_ARRANGEMENT_FOCUS = new global::System.Data.DataColumn("STERNUM_ARRANGEMENT_FOCUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTERNUM_ARRANGEMENT_FOCUS);
                this.columnSTERNUM_FIRST_FORTH_WHETTLE = new global::System.Data.DataColumn("STERNUM_FIRST_FORTH_WHETTLE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTERNUM_FIRST_FORTH_WHETTLE);
                this.columnSTERNUM_LETTER_NO = new global::System.Data.DataColumn("STERNUM_LETTER_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTERNUM_LETTER_NO);
                this.columnSTERNUM_LETTER_ARRANGE = new global::System.Data.DataColumn("STERNUM_LETTER_ARRANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTERNUM_LETTER_ARRANGE);
                this.columnBASE_ASH_FOG_VALUE = new global::System.Data.DataColumn("BASE_ASH_FOG_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBASE_ASH_FOG_VALUE);
                this.columnDIAGNOSE_AREA_VALUE = new global::System.Data.DataColumn("DIAGNOSE_AREA_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIAGNOSE_AREA_VALUE);
                this.columnBLANK_EXPOSAL_DENSITY = new global::System.Data.DataColumn("BLANK_EXPOSAL_DENSITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLANK_EXPOSAL_DENSITY);
                this.columnDIRT = new global::System.Data.DataColumn("DIRT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIRT);
                this.columnNICK = new global::System.Data.DataColumn("NICK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNICK);
                this.columnADHIBIT = new global::System.Data.DataColumn("ADHIBIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADHIBIT);
                this.columnWATER_MARK = new global::System.Data.DataColumn("WATER_MARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWATER_MARK);
                this.columnFINGER_MARK = new global::System.Data.DataColumn("FINGER_MARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINGER_MARK);
                this.columnLIGHT_LEAK = new global::System.Data.DataColumn("LIGHT_LEAK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIGHT_LEAK);
                this.columnSTATIC_SHADOW = new global::System.Data.DataColumn("STATIC_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATIC_SHADOW);
                this.columnEXTERNA_SHADOW = new global::System.Data.DataColumn("EXTERNA_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXTERNA_SHADOW);
                this.columnTOTAL_SCORE = new global::System.Data.DataColumn("TOTAL_SCORE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_SCORE);
                this.columnDISTINCTION = new global::System.Data.DataColumn("DISTINCTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTINCTION);
                this.columnNUMBER_KEY = new global::System.Data.DataColumn("NUMBER_KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER_KEY);
                this.columnD_STERNUM_ARRANGEMENT_FOCUS = new global::System.Data.DataColumn("D_STERNUM_ARRANGEMENT_FOCUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_STERNUM_ARRANGEMENT_FOCUS);
                this.columnD_STERNUM_LUNG_MARKINGS = new global::System.Data.DataColumn("D_STERNUM_LUNG_MARKINGS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_STERNUM_LUNG_MARKINGS);
                this.columnD_EXPOSURE_DOSE = new global::System.Data.DataColumn("D_EXPOSURE_DOSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_EXPOSURE_DOSE);
                this.columnD_FLAG_CONTENT = new global::System.Data.DataColumn("D_FLAG_CONTENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_FLAG_CONTENT);
                this.columnD_FLAG_PLACE_ARRANGE = new global::System.Data.DataColumn("D_FLAG_PLACE_ARRANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_FLAG_PLACE_ARRANGE);
                this.columnD_DEVICE_SHADOW = new global::System.Data.DataColumn("D_DEVICE_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_DEVICE_SHADOW);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SternumRow NewSternumRow() {
                return ((SternumRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SternumRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SternumRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SternumRowChanged != null)) {
                    this.SternumRowChanged(this, new SternumRowChangeEvent(((SternumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SternumRowChanging != null)) {
                    this.SternumRowChanging(this, new SternumRowChangeEvent(((SternumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SternumRowDeleted != null)) {
                    this.SternumRowDeleted(this, new SternumRowChangeEvent(((SternumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SternumRowDeleting != null)) {
                    this.SternumRowDeleting(this, new SternumRowChangeEvent(((SternumRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSternumRow(SternumRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CR_DataSet ds = new CR_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SternumDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class KnuckleDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEXAM_ACCESSION_NUM;
            
            private global::System.Data.DataColumn columnPATIENT_LOCAL_ID;
            
            private global::System.Data.DataColumn columnQC_DATE;
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnPATIENT_NAME;
            
            private global::System.Data.DataColumn columnPATIENT_SEX;
            
            private global::System.Data.DataColumn columnSTUDY_DATE_TIME;
            
            private global::System.Data.DataColumn columnKNUCKLE_PROJECTION;
            
            private global::System.Data.DataColumn columnKNUCKLE_LONG_AXIS_PARALLEL;
            
            private global::System.Data.DataColumn columnKNUCKLE_WRAP;
            
            private global::System.Data.DataColumn columnKNUCKLE_IMAGE_DISTORTION;
            
            private global::System.Data.DataColumn columnKNUCKLE_RESOLUTION;
            
            private global::System.Data.DataColumn columnKNUCKLE_ARRANGEMENT_FOCUS;
            
            private global::System.Data.DataColumn columnKNUCKLE_LETTER_ARRANGE;
            
            private global::System.Data.DataColumn columnBASE_ASH_FOG_VALUE;
            
            private global::System.Data.DataColumn columnDIAGNOSE_AREA_VALUE;
            
            private global::System.Data.DataColumn columnBLANK_EXPOSAL_DENSITY;
            
            private global::System.Data.DataColumn columnDIRT;
            
            private global::System.Data.DataColumn columnNICK;
            
            private global::System.Data.DataColumn columnADHIBIT;
            
            private global::System.Data.DataColumn columnWATER_MARK;
            
            private global::System.Data.DataColumn columnFINGER_MARK;
            
            private global::System.Data.DataColumn columnLIGHT_LEAK;
            
            private global::System.Data.DataColumn columnSTATIC_SHADOW;
            
            private global::System.Data.DataColumn columnEXTERNA_SHADOW;
            
            private global::System.Data.DataColumn columnTOTAL_SCORE;
            
            private global::System.Data.DataColumn columnDISTINCTION;
            
            private global::System.Data.DataColumn columnNUMBER_KEY;
            
            private global::System.Data.DataColumn columnD_EXPOSURE_DOSE;
            
            private global::System.Data.DataColumn columnD_FLAG_CONTENT;
            
            private global::System.Data.DataColumn columnD_FLAG_PLACE_ARRANGE;
            
            private global::System.Data.DataColumn columnD_DEVICE_SHADOW;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KnuckleDataTable() {
                this.TableName = "Knuckle";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KnuckleDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected KnuckleDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_ACCESSION_NUMColumn {
                get {
                    return this.columnEXAM_ACCESSION_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_LOCAL_IDColumn {
                get {
                    return this.columnPATIENT_LOCAL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QC_DATEColumn {
                get {
                    return this.columnQC_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMEColumn {
                get {
                    return this.columnPATIENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_SEXColumn {
                get {
                    return this.columnPATIENT_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STUDY_DATE_TIMEColumn {
                get {
                    return this.columnSTUDY_DATE_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KNUCKLE_PROJECTIONColumn {
                get {
                    return this.columnKNUCKLE_PROJECTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KNUCKLE_LONG_AXIS_PARALLELColumn {
                get {
                    return this.columnKNUCKLE_LONG_AXIS_PARALLEL;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KNUCKLE_WRAPColumn {
                get {
                    return this.columnKNUCKLE_WRAP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KNUCKLE_IMAGE_DISTORTIONColumn {
                get {
                    return this.columnKNUCKLE_IMAGE_DISTORTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KNUCKLE_RESOLUTIONColumn {
                get {
                    return this.columnKNUCKLE_RESOLUTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KNUCKLE_ARRANGEMENT_FOCUSColumn {
                get {
                    return this.columnKNUCKLE_ARRANGEMENT_FOCUS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn KNUCKLE_LETTER_ARRANGEColumn {
                get {
                    return this.columnKNUCKLE_LETTER_ARRANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BASE_ASH_FOG_VALUEColumn {
                get {
                    return this.columnBASE_ASH_FOG_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIAGNOSE_AREA_VALUEColumn {
                get {
                    return this.columnDIAGNOSE_AREA_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLANK_EXPOSAL_DENSITYColumn {
                get {
                    return this.columnBLANK_EXPOSAL_DENSITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIRTColumn {
                get {
                    return this.columnDIRT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NICKColumn {
                get {
                    return this.columnNICK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADHIBITColumn {
                get {
                    return this.columnADHIBIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WATER_MARKColumn {
                get {
                    return this.columnWATER_MARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINGER_MARKColumn {
                get {
                    return this.columnFINGER_MARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIGHT_LEAKColumn {
                get {
                    return this.columnLIGHT_LEAK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATIC_SHADOWColumn {
                get {
                    return this.columnSTATIC_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXTERNA_SHADOWColumn {
                get {
                    return this.columnEXTERNA_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_SCOREColumn {
                get {
                    return this.columnTOTAL_SCORE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISTINCTIONColumn {
                get {
                    return this.columnDISTINCTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBER_KEYColumn {
                get {
                    return this.columnNUMBER_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_EXPOSURE_DOSEColumn {
                get {
                    return this.columnD_EXPOSURE_DOSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_FLAG_CONTENTColumn {
                get {
                    return this.columnD_FLAG_CONTENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_FLAG_PLACE_ARRANGEColumn {
                get {
                    return this.columnD_FLAG_PLACE_ARRANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_DEVICE_SHADOWColumn {
                get {
                    return this.columnD_DEVICE_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KnuckleRow this[int index] {
                get {
                    return ((KnuckleRow)(this.Rows[index]));
                }
            }
            
            public event KnuckleRowChangeEventHandler KnuckleRowChanging;
            
            public event KnuckleRowChangeEventHandler KnuckleRowChanged;
            
            public event KnuckleRowChangeEventHandler KnuckleRowDeleting;
            
            public event KnuckleRowChangeEventHandler KnuckleRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddKnuckleRow(KnuckleRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KnuckleRow AddKnuckleRow(
                        string EXAM_ACCESSION_NUM, 
                        string PATIENT_LOCAL_ID, 
                        string QC_DATE, 
                        string PATIENT_ID, 
                        string PATIENT_NAME, 
                        string PATIENT_SEX, 
                        string STUDY_DATE_TIME, 
                        string KNUCKLE_PROJECTION, 
                        string KNUCKLE_LONG_AXIS_PARALLEL, 
                        string KNUCKLE_WRAP, 
                        string KNUCKLE_IMAGE_DISTORTION, 
                        string KNUCKLE_RESOLUTION, 
                        string KNUCKLE_ARRANGEMENT_FOCUS, 
                        string KNUCKLE_LETTER_ARRANGE, 
                        string BASE_ASH_FOG_VALUE, 
                        string DIAGNOSE_AREA_VALUE, 
                        string BLANK_EXPOSAL_DENSITY, 
                        string DIRT, 
                        string NICK, 
                        string ADHIBIT, 
                        string WATER_MARK, 
                        string FINGER_MARK, 
                        string LIGHT_LEAK, 
                        string STATIC_SHADOW, 
                        string EXTERNA_SHADOW, 
                        string TOTAL_SCORE, 
                        string DISTINCTION, 
                        string NUMBER_KEY, 
                        string D_EXPOSURE_DOSE, 
                        string D_FLAG_CONTENT, 
                        string D_FLAG_PLACE_ARRANGE, 
                        string D_DEVICE_SHADOW) {
                KnuckleRow rowKnuckleRow = ((KnuckleRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EXAM_ACCESSION_NUM,
                        PATIENT_LOCAL_ID,
                        QC_DATE,
                        PATIENT_ID,
                        PATIENT_NAME,
                        PATIENT_SEX,
                        STUDY_DATE_TIME,
                        KNUCKLE_PROJECTION,
                        KNUCKLE_LONG_AXIS_PARALLEL,
                        KNUCKLE_WRAP,
                        KNUCKLE_IMAGE_DISTORTION,
                        KNUCKLE_RESOLUTION,
                        KNUCKLE_ARRANGEMENT_FOCUS,
                        KNUCKLE_LETTER_ARRANGE,
                        BASE_ASH_FOG_VALUE,
                        DIAGNOSE_AREA_VALUE,
                        BLANK_EXPOSAL_DENSITY,
                        DIRT,
                        NICK,
                        ADHIBIT,
                        WATER_MARK,
                        FINGER_MARK,
                        LIGHT_LEAK,
                        STATIC_SHADOW,
                        EXTERNA_SHADOW,
                        TOTAL_SCORE,
                        DISTINCTION,
                        NUMBER_KEY,
                        D_EXPOSURE_DOSE,
                        D_FLAG_CONTENT,
                        D_FLAG_PLACE_ARRANGE,
                        D_DEVICE_SHADOW};
                rowKnuckleRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowKnuckleRow);
                return rowKnuckleRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                KnuckleDataTable cln = ((KnuckleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new KnuckleDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEXAM_ACCESSION_NUM = base.Columns["EXAM_ACCESSION_NUM"];
                this.columnPATIENT_LOCAL_ID = base.Columns["PATIENT_LOCAL_ID"];
                this.columnQC_DATE = base.Columns["QC_DATE"];
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnPATIENT_NAME = base.Columns["PATIENT_NAME"];
                this.columnPATIENT_SEX = base.Columns["PATIENT_SEX"];
                this.columnSTUDY_DATE_TIME = base.Columns["STUDY_DATE_TIME"];
                this.columnKNUCKLE_PROJECTION = base.Columns["KNUCKLE_PROJECTION"];
                this.columnKNUCKLE_LONG_AXIS_PARALLEL = base.Columns["KNUCKLE_LONG_AXIS_PARALLEL"];
                this.columnKNUCKLE_WRAP = base.Columns["KNUCKLE_WRAP"];
                this.columnKNUCKLE_IMAGE_DISTORTION = base.Columns["KNUCKLE_IMAGE_DISTORTION"];
                this.columnKNUCKLE_RESOLUTION = base.Columns["KNUCKLE_RESOLUTION"];
                this.columnKNUCKLE_ARRANGEMENT_FOCUS = base.Columns["KNUCKLE_ARRANGEMENT_FOCUS"];
                this.columnKNUCKLE_LETTER_ARRANGE = base.Columns["KNUCKLE_LETTER_ARRANGE"];
                this.columnBASE_ASH_FOG_VALUE = base.Columns["BASE_ASH_FOG_VALUE"];
                this.columnDIAGNOSE_AREA_VALUE = base.Columns["DIAGNOSE_AREA_VALUE"];
                this.columnBLANK_EXPOSAL_DENSITY = base.Columns["BLANK_EXPOSAL_DENSITY"];
                this.columnDIRT = base.Columns["DIRT"];
                this.columnNICK = base.Columns["NICK"];
                this.columnADHIBIT = base.Columns["ADHIBIT"];
                this.columnWATER_MARK = base.Columns["WATER_MARK"];
                this.columnFINGER_MARK = base.Columns["FINGER_MARK"];
                this.columnLIGHT_LEAK = base.Columns["LIGHT_LEAK"];
                this.columnSTATIC_SHADOW = base.Columns["STATIC_SHADOW"];
                this.columnEXTERNA_SHADOW = base.Columns["EXTERNA_SHADOW"];
                this.columnTOTAL_SCORE = base.Columns["TOTAL_SCORE"];
                this.columnDISTINCTION = base.Columns["DISTINCTION"];
                this.columnNUMBER_KEY = base.Columns["NUMBER_KEY"];
                this.columnD_EXPOSURE_DOSE = base.Columns["D_EXPOSURE_DOSE"];
                this.columnD_FLAG_CONTENT = base.Columns["D_FLAG_CONTENT"];
                this.columnD_FLAG_PLACE_ARRANGE = base.Columns["D_FLAG_PLACE_ARRANGE"];
                this.columnD_DEVICE_SHADOW = base.Columns["D_DEVICE_SHADOW"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEXAM_ACCESSION_NUM = new global::System.Data.DataColumn("EXAM_ACCESSION_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_ACCESSION_NUM);
                this.columnPATIENT_LOCAL_ID = new global::System.Data.DataColumn("PATIENT_LOCAL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_LOCAL_ID);
                this.columnQC_DATE = new global::System.Data.DataColumn("QC_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQC_DATE);
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnPATIENT_NAME = new global::System.Data.DataColumn("PATIENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAME);
                this.columnPATIENT_SEX = new global::System.Data.DataColumn("PATIENT_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_SEX);
                this.columnSTUDY_DATE_TIME = new global::System.Data.DataColumn("STUDY_DATE_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTUDY_DATE_TIME);
                this.columnKNUCKLE_PROJECTION = new global::System.Data.DataColumn("KNUCKLE_PROJECTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKNUCKLE_PROJECTION);
                this.columnKNUCKLE_LONG_AXIS_PARALLEL = new global::System.Data.DataColumn("KNUCKLE_LONG_AXIS_PARALLEL", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKNUCKLE_LONG_AXIS_PARALLEL);
                this.columnKNUCKLE_WRAP = new global::System.Data.DataColumn("KNUCKLE_WRAP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKNUCKLE_WRAP);
                this.columnKNUCKLE_IMAGE_DISTORTION = new global::System.Data.DataColumn("KNUCKLE_IMAGE_DISTORTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKNUCKLE_IMAGE_DISTORTION);
                this.columnKNUCKLE_RESOLUTION = new global::System.Data.DataColumn("KNUCKLE_RESOLUTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKNUCKLE_RESOLUTION);
                this.columnKNUCKLE_ARRANGEMENT_FOCUS = new global::System.Data.DataColumn("KNUCKLE_ARRANGEMENT_FOCUS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKNUCKLE_ARRANGEMENT_FOCUS);
                this.columnKNUCKLE_LETTER_ARRANGE = new global::System.Data.DataColumn("KNUCKLE_LETTER_ARRANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnKNUCKLE_LETTER_ARRANGE);
                this.columnBASE_ASH_FOG_VALUE = new global::System.Data.DataColumn("BASE_ASH_FOG_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBASE_ASH_FOG_VALUE);
                this.columnDIAGNOSE_AREA_VALUE = new global::System.Data.DataColumn("DIAGNOSE_AREA_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIAGNOSE_AREA_VALUE);
                this.columnBLANK_EXPOSAL_DENSITY = new global::System.Data.DataColumn("BLANK_EXPOSAL_DENSITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLANK_EXPOSAL_DENSITY);
                this.columnDIRT = new global::System.Data.DataColumn("DIRT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIRT);
                this.columnNICK = new global::System.Data.DataColumn("NICK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNICK);
                this.columnADHIBIT = new global::System.Data.DataColumn("ADHIBIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADHIBIT);
                this.columnWATER_MARK = new global::System.Data.DataColumn("WATER_MARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWATER_MARK);
                this.columnFINGER_MARK = new global::System.Data.DataColumn("FINGER_MARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINGER_MARK);
                this.columnLIGHT_LEAK = new global::System.Data.DataColumn("LIGHT_LEAK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIGHT_LEAK);
                this.columnSTATIC_SHADOW = new global::System.Data.DataColumn("STATIC_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATIC_SHADOW);
                this.columnEXTERNA_SHADOW = new global::System.Data.DataColumn("EXTERNA_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXTERNA_SHADOW);
                this.columnTOTAL_SCORE = new global::System.Data.DataColumn("TOTAL_SCORE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_SCORE);
                this.columnDISTINCTION = new global::System.Data.DataColumn("DISTINCTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTINCTION);
                this.columnNUMBER_KEY = new global::System.Data.DataColumn("NUMBER_KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER_KEY);
                this.columnD_EXPOSURE_DOSE = new global::System.Data.DataColumn("D_EXPOSURE_DOSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_EXPOSURE_DOSE);
                this.columnD_FLAG_CONTENT = new global::System.Data.DataColumn("D_FLAG_CONTENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_FLAG_CONTENT);
                this.columnD_FLAG_PLACE_ARRANGE = new global::System.Data.DataColumn("D_FLAG_PLACE_ARRANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_FLAG_PLACE_ARRANGE);
                this.columnD_DEVICE_SHADOW = new global::System.Data.DataColumn("D_DEVICE_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_DEVICE_SHADOW);
                this.columnKNUCKLE_PROJECTION.Caption = "STERNUM_BREAST";
                this.columnKNUCKLE_LONG_AXIS_PARALLEL.Caption = "STERNUM_BLADEBONE";
                this.columnKNUCKLE_WRAP.Caption = "STERNUM_BOARD";
                this.columnKNUCKLE_IMAGE_DISTORTION.Caption = "STERNUM_IMAGE_DISTORTION";
                this.columnKNUCKLE_RESOLUTION.Caption = "STERNUM_ARRANGEMENT_FOCUS";
                this.columnKNUCKLE_ARRANGEMENT_FOCUS.Caption = "STERNUM_FIRST_FORTH_WHETTLE";
                this.columnKNUCKLE_LETTER_ARRANGE.Caption = "STERNUM_LETTER_NO";
                this.columnNUMBER_KEY.Caption = "NUMBER";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KnuckleRow NewKnuckleRow() {
                return ((KnuckleRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new KnuckleRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(KnuckleRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.KnuckleRowChanged != null)) {
                    this.KnuckleRowChanged(this, new KnuckleRowChangeEvent(((KnuckleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.KnuckleRowChanging != null)) {
                    this.KnuckleRowChanging(this, new KnuckleRowChangeEvent(((KnuckleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.KnuckleRowDeleted != null)) {
                    this.KnuckleRowDeleted(this, new KnuckleRowChangeEvent(((KnuckleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.KnuckleRowDeleting != null)) {
                    this.KnuckleRowDeleting(this, new KnuckleRowChangeEvent(((KnuckleRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveKnuckleRow(KnuckleRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CR_DataSet ds = new CR_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "KnuckleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class IVPDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEXAM_ACCESSION_NUM;
            
            private global::System.Data.DataColumn columnPATIENT_LOCAL_ID;
            
            private global::System.Data.DataColumn columnQC_DATE;
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnPATIENT_NAME;
            
            private global::System.Data.DataColumn columnPATIENT_SEX;
            
            private global::System.Data.DataColumn columnSTUDY_DATE_TIME;
            
            private global::System.Data.DataColumn columnIVP_FILM_POSTURE_PLACE;
            
            private global::System.Data.DataColumn columnIVP_PROJECTION_CENTRAGE;
            
            private global::System.Data.DataColumn columnIVP_PHOTOGRAPHS_ENOUGH;
            
            private global::System.Data.DataColumn columnIVP_DEVELOP;
            
            private global::System.Data.DataColumn columnIVP_CONTRAST;
            
            private global::System.Data.DataColumn columnIVP_LETTER_NO;
            
            private global::System.Data.DataColumn columnIVP_LETTER_ARRANGE;
            
            private global::System.Data.DataColumn columnBASE_ASH_FOG_VALUE;
            
            private global::System.Data.DataColumn columnDIAGNOSE_AREA_VALUE;
            
            private global::System.Data.DataColumn columnBLANK_EXPOSAL_DENSITY;
            
            private global::System.Data.DataColumn columnDIRT;
            
            private global::System.Data.DataColumn columnNICK;
            
            private global::System.Data.DataColumn columnADHIBIT;
            
            private global::System.Data.DataColumn columnWATER_MARK;
            
            private global::System.Data.DataColumn columnFINGER_MARK;
            
            private global::System.Data.DataColumn columnLIGHT_LEAK;
            
            private global::System.Data.DataColumn columnSTATIC_SHADOW;
            
            private global::System.Data.DataColumn columnEXTERNA_SHADOW;
            
            private global::System.Data.DataColumn columnTOTAL_SCORE;
            
            private global::System.Data.DataColumn columnDISTINCTION;
            
            private global::System.Data.DataColumn columnNUMBER_KEY;
            
            private global::System.Data.DataColumn columnD_IVP_RESOLUTION;
            
            private global::System.Data.DataColumn columnD_IVP_HIST_CONTRAST;
            
            private global::System.Data.DataColumn columnD_EXPOSURE_DOSE;
            
            private global::System.Data.DataColumn columnD_FLAG_CONTENT;
            
            private global::System.Data.DataColumn columnD_FLAG_PLACE_ARRANGE;
            
            private global::System.Data.DataColumn columnD_DEVICE_SHADOW;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IVPDataTable() {
                this.TableName = "IVP";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IVPDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected IVPDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_ACCESSION_NUMColumn {
                get {
                    return this.columnEXAM_ACCESSION_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_LOCAL_IDColumn {
                get {
                    return this.columnPATIENT_LOCAL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QC_DATEColumn {
                get {
                    return this.columnQC_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMEColumn {
                get {
                    return this.columnPATIENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_SEXColumn {
                get {
                    return this.columnPATIENT_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STUDY_DATE_TIMEColumn {
                get {
                    return this.columnSTUDY_DATE_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IVP_FILM_POSTURE_PLACEColumn {
                get {
                    return this.columnIVP_FILM_POSTURE_PLACE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IVP_PROJECTION_CENTRAGEColumn {
                get {
                    return this.columnIVP_PROJECTION_CENTRAGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IVP_PHOTOGRAPHS_ENOUGHColumn {
                get {
                    return this.columnIVP_PHOTOGRAPHS_ENOUGH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IVP_DEVELOPColumn {
                get {
                    return this.columnIVP_DEVELOP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IVP_CONTRASTColumn {
                get {
                    return this.columnIVP_CONTRAST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IVP_LETTER_NOColumn {
                get {
                    return this.columnIVP_LETTER_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IVP_LETTER_ARRANGEColumn {
                get {
                    return this.columnIVP_LETTER_ARRANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BASE_ASH_FOG_VALUEColumn {
                get {
                    return this.columnBASE_ASH_FOG_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIAGNOSE_AREA_VALUEColumn {
                get {
                    return this.columnDIAGNOSE_AREA_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLANK_EXPOSAL_DENSITYColumn {
                get {
                    return this.columnBLANK_EXPOSAL_DENSITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIRTColumn {
                get {
                    return this.columnDIRT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NICKColumn {
                get {
                    return this.columnNICK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADHIBITColumn {
                get {
                    return this.columnADHIBIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WATER_MARKColumn {
                get {
                    return this.columnWATER_MARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINGER_MARKColumn {
                get {
                    return this.columnFINGER_MARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIGHT_LEAKColumn {
                get {
                    return this.columnLIGHT_LEAK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATIC_SHADOWColumn {
                get {
                    return this.columnSTATIC_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXTERNA_SHADOWColumn {
                get {
                    return this.columnEXTERNA_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_SCOREColumn {
                get {
                    return this.columnTOTAL_SCORE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISTINCTIONColumn {
                get {
                    return this.columnDISTINCTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBER_KEYColumn {
                get {
                    return this.columnNUMBER_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_IVP_RESOLUTIONColumn {
                get {
                    return this.columnD_IVP_RESOLUTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_IVP_HIST_CONTRASTColumn {
                get {
                    return this.columnD_IVP_HIST_CONTRAST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_EXPOSURE_DOSEColumn {
                get {
                    return this.columnD_EXPOSURE_DOSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_FLAG_CONTENTColumn {
                get {
                    return this.columnD_FLAG_CONTENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_FLAG_PLACE_ARRANGEColumn {
                get {
                    return this.columnD_FLAG_PLACE_ARRANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_DEVICE_SHADOWColumn {
                get {
                    return this.columnD_DEVICE_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IVPRow this[int index] {
                get {
                    return ((IVPRow)(this.Rows[index]));
                }
            }
            
            public event IVPRowChangeEventHandler IVPRowChanging;
            
            public event IVPRowChangeEventHandler IVPRowChanged;
            
            public event IVPRowChangeEventHandler IVPRowDeleting;
            
            public event IVPRowChangeEventHandler IVPRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddIVPRow(IVPRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IVPRow AddIVPRow(
                        string EXAM_ACCESSION_NUM, 
                        string PATIENT_LOCAL_ID, 
                        string QC_DATE, 
                        string PATIENT_ID, 
                        string PATIENT_NAME, 
                        string PATIENT_SEX, 
                        string STUDY_DATE_TIME, 
                        string IVP_FILM_POSTURE_PLACE, 
                        string IVP_PROJECTION_CENTRAGE, 
                        string IVP_PHOTOGRAPHS_ENOUGH, 
                        string IVP_DEVELOP, 
                        string IVP_CONTRAST, 
                        string IVP_LETTER_NO, 
                        string IVP_LETTER_ARRANGE, 
                        string BASE_ASH_FOG_VALUE, 
                        string DIAGNOSE_AREA_VALUE, 
                        string BLANK_EXPOSAL_DENSITY, 
                        string DIRT, 
                        string NICK, 
                        string ADHIBIT, 
                        string WATER_MARK, 
                        string FINGER_MARK, 
                        string LIGHT_LEAK, 
                        string STATIC_SHADOW, 
                        string EXTERNA_SHADOW, 
                        string TOTAL_SCORE, 
                        string DISTINCTION, 
                        string NUMBER_KEY, 
                        string D_IVP_RESOLUTION, 
                        string D_IVP_HIST_CONTRAST, 
                        string D_EXPOSURE_DOSE, 
                        string D_FLAG_CONTENT, 
                        string D_FLAG_PLACE_ARRANGE, 
                        string D_DEVICE_SHADOW) {
                IVPRow rowIVPRow = ((IVPRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EXAM_ACCESSION_NUM,
                        PATIENT_LOCAL_ID,
                        QC_DATE,
                        PATIENT_ID,
                        PATIENT_NAME,
                        PATIENT_SEX,
                        STUDY_DATE_TIME,
                        IVP_FILM_POSTURE_PLACE,
                        IVP_PROJECTION_CENTRAGE,
                        IVP_PHOTOGRAPHS_ENOUGH,
                        IVP_DEVELOP,
                        IVP_CONTRAST,
                        IVP_LETTER_NO,
                        IVP_LETTER_ARRANGE,
                        BASE_ASH_FOG_VALUE,
                        DIAGNOSE_AREA_VALUE,
                        BLANK_EXPOSAL_DENSITY,
                        DIRT,
                        NICK,
                        ADHIBIT,
                        WATER_MARK,
                        FINGER_MARK,
                        LIGHT_LEAK,
                        STATIC_SHADOW,
                        EXTERNA_SHADOW,
                        TOTAL_SCORE,
                        DISTINCTION,
                        NUMBER_KEY,
                        D_IVP_RESOLUTION,
                        D_IVP_HIST_CONTRAST,
                        D_EXPOSURE_DOSE,
                        D_FLAG_CONTENT,
                        D_FLAG_PLACE_ARRANGE,
                        D_DEVICE_SHADOW};
                rowIVPRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowIVPRow);
                return rowIVPRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                IVPDataTable cln = ((IVPDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new IVPDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEXAM_ACCESSION_NUM = base.Columns["EXAM_ACCESSION_NUM"];
                this.columnPATIENT_LOCAL_ID = base.Columns["PATIENT_LOCAL_ID"];
                this.columnQC_DATE = base.Columns["QC_DATE"];
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnPATIENT_NAME = base.Columns["PATIENT_NAME"];
                this.columnPATIENT_SEX = base.Columns["PATIENT_SEX"];
                this.columnSTUDY_DATE_TIME = base.Columns["STUDY_DATE_TIME"];
                this.columnIVP_FILM_POSTURE_PLACE = base.Columns["IVP_FILM_POSTURE_PLACE"];
                this.columnIVP_PROJECTION_CENTRAGE = base.Columns["IVP_PROJECTION_CENTRAGE"];
                this.columnIVP_PHOTOGRAPHS_ENOUGH = base.Columns["IVP_PHOTOGRAPHS_ENOUGH"];
                this.columnIVP_DEVELOP = base.Columns["IVP_DEVELOP"];
                this.columnIVP_CONTRAST = base.Columns["IVP_CONTRAST"];
                this.columnIVP_LETTER_NO = base.Columns["IVP_LETTER_NO"];
                this.columnIVP_LETTER_ARRANGE = base.Columns["IVP_LETTER_ARRANGE"];
                this.columnBASE_ASH_FOG_VALUE = base.Columns["BASE_ASH_FOG_VALUE"];
                this.columnDIAGNOSE_AREA_VALUE = base.Columns["DIAGNOSE_AREA_VALUE"];
                this.columnBLANK_EXPOSAL_DENSITY = base.Columns["BLANK_EXPOSAL_DENSITY"];
                this.columnDIRT = base.Columns["DIRT"];
                this.columnNICK = base.Columns["NICK"];
                this.columnADHIBIT = base.Columns["ADHIBIT"];
                this.columnWATER_MARK = base.Columns["WATER_MARK"];
                this.columnFINGER_MARK = base.Columns["FINGER_MARK"];
                this.columnLIGHT_LEAK = base.Columns["LIGHT_LEAK"];
                this.columnSTATIC_SHADOW = base.Columns["STATIC_SHADOW"];
                this.columnEXTERNA_SHADOW = base.Columns["EXTERNA_SHADOW"];
                this.columnTOTAL_SCORE = base.Columns["TOTAL_SCORE"];
                this.columnDISTINCTION = base.Columns["DISTINCTION"];
                this.columnNUMBER_KEY = base.Columns["NUMBER_KEY"];
                this.columnD_IVP_RESOLUTION = base.Columns["D_IVP_RESOLUTION"];
                this.columnD_IVP_HIST_CONTRAST = base.Columns["D_IVP_HIST_CONTRAST"];
                this.columnD_EXPOSURE_DOSE = base.Columns["D_EXPOSURE_DOSE"];
                this.columnD_FLAG_CONTENT = base.Columns["D_FLAG_CONTENT"];
                this.columnD_FLAG_PLACE_ARRANGE = base.Columns["D_FLAG_PLACE_ARRANGE"];
                this.columnD_DEVICE_SHADOW = base.Columns["D_DEVICE_SHADOW"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEXAM_ACCESSION_NUM = new global::System.Data.DataColumn("EXAM_ACCESSION_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_ACCESSION_NUM);
                this.columnPATIENT_LOCAL_ID = new global::System.Data.DataColumn("PATIENT_LOCAL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_LOCAL_ID);
                this.columnQC_DATE = new global::System.Data.DataColumn("QC_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQC_DATE);
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnPATIENT_NAME = new global::System.Data.DataColumn("PATIENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAME);
                this.columnPATIENT_SEX = new global::System.Data.DataColumn("PATIENT_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_SEX);
                this.columnSTUDY_DATE_TIME = new global::System.Data.DataColumn("STUDY_DATE_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTUDY_DATE_TIME);
                this.columnIVP_FILM_POSTURE_PLACE = new global::System.Data.DataColumn("IVP_FILM_POSTURE_PLACE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIVP_FILM_POSTURE_PLACE);
                this.columnIVP_PROJECTION_CENTRAGE = new global::System.Data.DataColumn("IVP_PROJECTION_CENTRAGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIVP_PROJECTION_CENTRAGE);
                this.columnIVP_PHOTOGRAPHS_ENOUGH = new global::System.Data.DataColumn("IVP_PHOTOGRAPHS_ENOUGH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIVP_PHOTOGRAPHS_ENOUGH);
                this.columnIVP_DEVELOP = new global::System.Data.DataColumn("IVP_DEVELOP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIVP_DEVELOP);
                this.columnIVP_CONTRAST = new global::System.Data.DataColumn("IVP_CONTRAST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIVP_CONTRAST);
                this.columnIVP_LETTER_NO = new global::System.Data.DataColumn("IVP_LETTER_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIVP_LETTER_NO);
                this.columnIVP_LETTER_ARRANGE = new global::System.Data.DataColumn("IVP_LETTER_ARRANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIVP_LETTER_ARRANGE);
                this.columnBASE_ASH_FOG_VALUE = new global::System.Data.DataColumn("BASE_ASH_FOG_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBASE_ASH_FOG_VALUE);
                this.columnDIAGNOSE_AREA_VALUE = new global::System.Data.DataColumn("DIAGNOSE_AREA_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIAGNOSE_AREA_VALUE);
                this.columnBLANK_EXPOSAL_DENSITY = new global::System.Data.DataColumn("BLANK_EXPOSAL_DENSITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLANK_EXPOSAL_DENSITY);
                this.columnDIRT = new global::System.Data.DataColumn("DIRT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIRT);
                this.columnNICK = new global::System.Data.DataColumn("NICK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNICK);
                this.columnADHIBIT = new global::System.Data.DataColumn("ADHIBIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADHIBIT);
                this.columnWATER_MARK = new global::System.Data.DataColumn("WATER_MARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWATER_MARK);
                this.columnFINGER_MARK = new global::System.Data.DataColumn("FINGER_MARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINGER_MARK);
                this.columnLIGHT_LEAK = new global::System.Data.DataColumn("LIGHT_LEAK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIGHT_LEAK);
                this.columnSTATIC_SHADOW = new global::System.Data.DataColumn("STATIC_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATIC_SHADOW);
                this.columnEXTERNA_SHADOW = new global::System.Data.DataColumn("EXTERNA_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXTERNA_SHADOW);
                this.columnTOTAL_SCORE = new global::System.Data.DataColumn("TOTAL_SCORE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_SCORE);
                this.columnDISTINCTION = new global::System.Data.DataColumn("DISTINCTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTINCTION);
                this.columnNUMBER_KEY = new global::System.Data.DataColumn("NUMBER_KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER_KEY);
                this.columnD_IVP_RESOLUTION = new global::System.Data.DataColumn("D_IVP_RESOLUTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_IVP_RESOLUTION);
                this.columnD_IVP_HIST_CONTRAST = new global::System.Data.DataColumn("D_IVP_HIST_CONTRAST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_IVP_HIST_CONTRAST);
                this.columnD_EXPOSURE_DOSE = new global::System.Data.DataColumn("D_EXPOSURE_DOSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_EXPOSURE_DOSE);
                this.columnD_FLAG_CONTENT = new global::System.Data.DataColumn("D_FLAG_CONTENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_FLAG_CONTENT);
                this.columnD_FLAG_PLACE_ARRANGE = new global::System.Data.DataColumn("D_FLAG_PLACE_ARRANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_FLAG_PLACE_ARRANGE);
                this.columnD_DEVICE_SHADOW = new global::System.Data.DataColumn("D_DEVICE_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_DEVICE_SHADOW);
                this.columnIVP_FILM_POSTURE_PLACE.Caption = "STERNUM_BREAST";
                this.columnIVP_PROJECTION_CENTRAGE.Caption = "STERNUM_BLADEBONE";
                this.columnIVP_PHOTOGRAPHS_ENOUGH.Caption = "STERNUM_BOARD";
                this.columnIVP_DEVELOP.Caption = "STERNUM_IMAGE_DISTORTION";
                this.columnIVP_CONTRAST.Caption = "STERNUM_ARRANGEMENT_FOCUS";
                this.columnIVP_LETTER_NO.Caption = "STERNUM_FIRST_FORTH_WHETTLE";
                this.columnIVP_LETTER_ARRANGE.Caption = "STERNUM_LETTER_NO";
                this.columnD_IVP_RESOLUTION.Caption = "D_STERNUM_ARRANGEMENT_FOCUS";
                this.columnD_IVP_HIST_CONTRAST.Caption = "D_STERNUM_LUNG_MARKINGS";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IVPRow NewIVPRow() {
                return ((IVPRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new IVPRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(IVPRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.IVPRowChanged != null)) {
                    this.IVPRowChanged(this, new IVPRowChangeEvent(((IVPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.IVPRowChanging != null)) {
                    this.IVPRowChanging(this, new IVPRowChangeEvent(((IVPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.IVPRowDeleted != null)) {
                    this.IVPRowDeleted(this, new IVPRowChangeEvent(((IVPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.IVPRowDeleting != null)) {
                    this.IVPRowDeleting(this, new IVPRowChangeEvent(((IVPRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveIVPRow(IVPRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CR_DataSet ds = new CR_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "IVPDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UGIDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEXAM_ACCESSION_NUM;
            
            private global::System.Data.DataColumn columnPATIENT_LOCAL_ID;
            
            private global::System.Data.DataColumn columnQC_DATE;
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnPATIENT_NAME;
            
            private global::System.Data.DataColumn columnPATIENT_SEX;
            
            private global::System.Data.DataColumn columnSTUDY_DATE_TIME;
            
            private global::System.Data.DataColumn columnUGI_PROJECTION_CASE;
            
            private global::System.Data.DataColumn columnUGI_INDICATION_RANGE;
            
            private global::System.Data.DataColumn columnUGI_PHOTOGRAPHS_ENOUGH;
            
            private global::System.Data.DataColumn columnUGI_CAVITY_LINE;
            
            private global::System.Data.DataColumn columnUGI_BLEB;
            
            private global::System.Data.DataColumn columnUGI_FLOCCULENCE;
            
            private global::System.Data.DataColumn columnUGI_MUCOSAL_FOLD;
            
            private global::System.Data.DataColumn columnUGI_CONTRAST;
            
            private global::System.Data.DataColumn columnUGI_INF_CRITERION;
            
            private global::System.Data.DataColumn columnBASE_ASH_FOG_VALUE;
            
            private global::System.Data.DataColumn columnDIAGNOSE_AREA_VALUE;
            
            private global::System.Data.DataColumn columnBLANK_EXPOSAL_DENSITY;
            
            private global::System.Data.DataColumn columnDIRT;
            
            private global::System.Data.DataColumn columnNICK;
            
            private global::System.Data.DataColumn columnADHIBIT;
            
            private global::System.Data.DataColumn columnWATER_MARK;
            
            private global::System.Data.DataColumn columnFINGER_MARK;
            
            private global::System.Data.DataColumn columnLIGHT_LEAK;
            
            private global::System.Data.DataColumn columnSTATIC_SHADOW;
            
            private global::System.Data.DataColumn columnEXTERNA_SHADOW;
            
            private global::System.Data.DataColumn columnTOTAL_SCORE;
            
            private global::System.Data.DataColumn columnDISTINCTION;
            
            private global::System.Data.DataColumn columnNUMBER_KEY;
            
            private global::System.Data.DataColumn columnD_EXPOSURE_DOSE;
            
            private global::System.Data.DataColumn columnD_FLAG_CONTENT;
            
            private global::System.Data.DataColumn columnD_FLAG_PLACE_ARRANGE;
            
            private global::System.Data.DataColumn columnD_DEVICE_SHADOW;
            
            private global::System.Data.DataColumn columnUGI_PATIENT_TYPE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UGIDataTable() {
                this.TableName = "UGI";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UGIDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected UGIDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_ACCESSION_NUMColumn {
                get {
                    return this.columnEXAM_ACCESSION_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_LOCAL_IDColumn {
                get {
                    return this.columnPATIENT_LOCAL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QC_DATEColumn {
                get {
                    return this.columnQC_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMEColumn {
                get {
                    return this.columnPATIENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_SEXColumn {
                get {
                    return this.columnPATIENT_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STUDY_DATE_TIMEColumn {
                get {
                    return this.columnSTUDY_DATE_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UGI_PROJECTION_CASEColumn {
                get {
                    return this.columnUGI_PROJECTION_CASE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UGI_INDICATION_RANGEColumn {
                get {
                    return this.columnUGI_INDICATION_RANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UGI_PHOTOGRAPHS_ENOUGHColumn {
                get {
                    return this.columnUGI_PHOTOGRAPHS_ENOUGH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UGI_CAVITY_LINEColumn {
                get {
                    return this.columnUGI_CAVITY_LINE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UGI_BLEBColumn {
                get {
                    return this.columnUGI_BLEB;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UGI_FLOCCULENCEColumn {
                get {
                    return this.columnUGI_FLOCCULENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UGI_MUCOSAL_FOLDColumn {
                get {
                    return this.columnUGI_MUCOSAL_FOLD;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UGI_CONTRASTColumn {
                get {
                    return this.columnUGI_CONTRAST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UGI_INF_CRITERIONColumn {
                get {
                    return this.columnUGI_INF_CRITERION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BASE_ASH_FOG_VALUEColumn {
                get {
                    return this.columnBASE_ASH_FOG_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIAGNOSE_AREA_VALUEColumn {
                get {
                    return this.columnDIAGNOSE_AREA_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLANK_EXPOSAL_DENSITYColumn {
                get {
                    return this.columnBLANK_EXPOSAL_DENSITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIRTColumn {
                get {
                    return this.columnDIRT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NICKColumn {
                get {
                    return this.columnNICK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADHIBITColumn {
                get {
                    return this.columnADHIBIT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WATER_MARKColumn {
                get {
                    return this.columnWATER_MARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINGER_MARKColumn {
                get {
                    return this.columnFINGER_MARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIGHT_LEAKColumn {
                get {
                    return this.columnLIGHT_LEAK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATIC_SHADOWColumn {
                get {
                    return this.columnSTATIC_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXTERNA_SHADOWColumn {
                get {
                    return this.columnEXTERNA_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_SCOREColumn {
                get {
                    return this.columnTOTAL_SCORE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISTINCTIONColumn {
                get {
                    return this.columnDISTINCTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBER_KEYColumn {
                get {
                    return this.columnNUMBER_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_EXPOSURE_DOSEColumn {
                get {
                    return this.columnD_EXPOSURE_DOSE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_FLAG_CONTENTColumn {
                get {
                    return this.columnD_FLAG_CONTENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_FLAG_PLACE_ARRANGEColumn {
                get {
                    return this.columnD_FLAG_PLACE_ARRANGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_DEVICE_SHADOWColumn {
                get {
                    return this.columnD_DEVICE_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UGI_PATIENT_TYPEColumn {
                get {
                    return this.columnUGI_PATIENT_TYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UGIRow this[int index] {
                get {
                    return ((UGIRow)(this.Rows[index]));
                }
            }
            
            public event UGIRowChangeEventHandler UGIRowChanging;
            
            public event UGIRowChangeEventHandler UGIRowChanged;
            
            public event UGIRowChangeEventHandler UGIRowDeleting;
            
            public event UGIRowChangeEventHandler UGIRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUGIRow(UGIRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UGIRow AddUGIRow(
                        string EXAM_ACCESSION_NUM, 
                        string PATIENT_LOCAL_ID, 
                        string QC_DATE, 
                        string PATIENT_ID, 
                        string PATIENT_NAME, 
                        string PATIENT_SEX, 
                        string STUDY_DATE_TIME, 
                        string UGI_PROJECTION_CASE, 
                        string UGI_INDICATION_RANGE, 
                        string UGI_PHOTOGRAPHS_ENOUGH, 
                        string UGI_CAVITY_LINE, 
                        string UGI_BLEB, 
                        string UGI_FLOCCULENCE, 
                        string UGI_MUCOSAL_FOLD, 
                        string UGI_CONTRAST, 
                        string UGI_INF_CRITERION, 
                        string BASE_ASH_FOG_VALUE, 
                        string DIAGNOSE_AREA_VALUE, 
                        string BLANK_EXPOSAL_DENSITY, 
                        string DIRT, 
                        string NICK, 
                        string ADHIBIT, 
                        string WATER_MARK, 
                        string FINGER_MARK, 
                        string LIGHT_LEAK, 
                        string STATIC_SHADOW, 
                        string EXTERNA_SHADOW, 
                        string TOTAL_SCORE, 
                        string DISTINCTION, 
                        string NUMBER_KEY, 
                        string D_EXPOSURE_DOSE, 
                        string D_FLAG_CONTENT, 
                        string D_FLAG_PLACE_ARRANGE, 
                        string D_DEVICE_SHADOW, 
                        string UGI_PATIENT_TYPE) {
                UGIRow rowUGIRow = ((UGIRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EXAM_ACCESSION_NUM,
                        PATIENT_LOCAL_ID,
                        QC_DATE,
                        PATIENT_ID,
                        PATIENT_NAME,
                        PATIENT_SEX,
                        STUDY_DATE_TIME,
                        UGI_PROJECTION_CASE,
                        UGI_INDICATION_RANGE,
                        UGI_PHOTOGRAPHS_ENOUGH,
                        UGI_CAVITY_LINE,
                        UGI_BLEB,
                        UGI_FLOCCULENCE,
                        UGI_MUCOSAL_FOLD,
                        UGI_CONTRAST,
                        UGI_INF_CRITERION,
                        BASE_ASH_FOG_VALUE,
                        DIAGNOSE_AREA_VALUE,
                        BLANK_EXPOSAL_DENSITY,
                        DIRT,
                        NICK,
                        ADHIBIT,
                        WATER_MARK,
                        FINGER_MARK,
                        LIGHT_LEAK,
                        STATIC_SHADOW,
                        EXTERNA_SHADOW,
                        TOTAL_SCORE,
                        DISTINCTION,
                        NUMBER_KEY,
                        D_EXPOSURE_DOSE,
                        D_FLAG_CONTENT,
                        D_FLAG_PLACE_ARRANGE,
                        D_DEVICE_SHADOW,
                        UGI_PATIENT_TYPE};
                rowUGIRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUGIRow);
                return rowUGIRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UGIDataTable cln = ((UGIDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UGIDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEXAM_ACCESSION_NUM = base.Columns["EXAM_ACCESSION_NUM"];
                this.columnPATIENT_LOCAL_ID = base.Columns["PATIENT_LOCAL_ID"];
                this.columnQC_DATE = base.Columns["QC_DATE"];
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnPATIENT_NAME = base.Columns["PATIENT_NAME"];
                this.columnPATIENT_SEX = base.Columns["PATIENT_SEX"];
                this.columnSTUDY_DATE_TIME = base.Columns["STUDY_DATE_TIME"];
                this.columnUGI_PROJECTION_CASE = base.Columns["UGI_PROJECTION_CASE"];
                this.columnUGI_INDICATION_RANGE = base.Columns["UGI_INDICATION_RANGE"];
                this.columnUGI_PHOTOGRAPHS_ENOUGH = base.Columns["UGI_PHOTOGRAPHS_ENOUGH"];
                this.columnUGI_CAVITY_LINE = base.Columns["UGI_CAVITY_LINE"];
                this.columnUGI_BLEB = base.Columns["UGI_BLEB"];
                this.columnUGI_FLOCCULENCE = base.Columns["UGI_FLOCCULENCE"];
                this.columnUGI_MUCOSAL_FOLD = base.Columns["UGI_MUCOSAL_FOLD"];
                this.columnUGI_CONTRAST = base.Columns["UGI_CONTRAST"];
                this.columnUGI_INF_CRITERION = base.Columns["UGI_INF_CRITERION"];
                this.columnBASE_ASH_FOG_VALUE = base.Columns["BASE_ASH_FOG_VALUE"];
                this.columnDIAGNOSE_AREA_VALUE = base.Columns["DIAGNOSE_AREA_VALUE"];
                this.columnBLANK_EXPOSAL_DENSITY = base.Columns["BLANK_EXPOSAL_DENSITY"];
                this.columnDIRT = base.Columns["DIRT"];
                this.columnNICK = base.Columns["NICK"];
                this.columnADHIBIT = base.Columns["ADHIBIT"];
                this.columnWATER_MARK = base.Columns["WATER_MARK"];
                this.columnFINGER_MARK = base.Columns["FINGER_MARK"];
                this.columnLIGHT_LEAK = base.Columns["LIGHT_LEAK"];
                this.columnSTATIC_SHADOW = base.Columns["STATIC_SHADOW"];
                this.columnEXTERNA_SHADOW = base.Columns["EXTERNA_SHADOW"];
                this.columnTOTAL_SCORE = base.Columns["TOTAL_SCORE"];
                this.columnDISTINCTION = base.Columns["DISTINCTION"];
                this.columnNUMBER_KEY = base.Columns["NUMBER_KEY"];
                this.columnD_EXPOSURE_DOSE = base.Columns["D_EXPOSURE_DOSE"];
                this.columnD_FLAG_CONTENT = base.Columns["D_FLAG_CONTENT"];
                this.columnD_FLAG_PLACE_ARRANGE = base.Columns["D_FLAG_PLACE_ARRANGE"];
                this.columnD_DEVICE_SHADOW = base.Columns["D_DEVICE_SHADOW"];
                this.columnUGI_PATIENT_TYPE = base.Columns["UGI_PATIENT_TYPE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEXAM_ACCESSION_NUM = new global::System.Data.DataColumn("EXAM_ACCESSION_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_ACCESSION_NUM);
                this.columnPATIENT_LOCAL_ID = new global::System.Data.DataColumn("PATIENT_LOCAL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_LOCAL_ID);
                this.columnQC_DATE = new global::System.Data.DataColumn("QC_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQC_DATE);
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnPATIENT_NAME = new global::System.Data.DataColumn("PATIENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAME);
                this.columnPATIENT_SEX = new global::System.Data.DataColumn("PATIENT_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_SEX);
                this.columnSTUDY_DATE_TIME = new global::System.Data.DataColumn("STUDY_DATE_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTUDY_DATE_TIME);
                this.columnUGI_PROJECTION_CASE = new global::System.Data.DataColumn("UGI_PROJECTION_CASE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUGI_PROJECTION_CASE);
                this.columnUGI_INDICATION_RANGE = new global::System.Data.DataColumn("UGI_INDICATION_RANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUGI_INDICATION_RANGE);
                this.columnUGI_PHOTOGRAPHS_ENOUGH = new global::System.Data.DataColumn("UGI_PHOTOGRAPHS_ENOUGH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUGI_PHOTOGRAPHS_ENOUGH);
                this.columnUGI_CAVITY_LINE = new global::System.Data.DataColumn("UGI_CAVITY_LINE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUGI_CAVITY_LINE);
                this.columnUGI_BLEB = new global::System.Data.DataColumn("UGI_BLEB", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUGI_BLEB);
                this.columnUGI_FLOCCULENCE = new global::System.Data.DataColumn("UGI_FLOCCULENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUGI_FLOCCULENCE);
                this.columnUGI_MUCOSAL_FOLD = new global::System.Data.DataColumn("UGI_MUCOSAL_FOLD", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUGI_MUCOSAL_FOLD);
                this.columnUGI_CONTRAST = new global::System.Data.DataColumn("UGI_CONTRAST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUGI_CONTRAST);
                this.columnUGI_INF_CRITERION = new global::System.Data.DataColumn("UGI_INF_CRITERION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUGI_INF_CRITERION);
                this.columnBASE_ASH_FOG_VALUE = new global::System.Data.DataColumn("BASE_ASH_FOG_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBASE_ASH_FOG_VALUE);
                this.columnDIAGNOSE_AREA_VALUE = new global::System.Data.DataColumn("DIAGNOSE_AREA_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIAGNOSE_AREA_VALUE);
                this.columnBLANK_EXPOSAL_DENSITY = new global::System.Data.DataColumn("BLANK_EXPOSAL_DENSITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLANK_EXPOSAL_DENSITY);
                this.columnDIRT = new global::System.Data.DataColumn("DIRT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIRT);
                this.columnNICK = new global::System.Data.DataColumn("NICK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNICK);
                this.columnADHIBIT = new global::System.Data.DataColumn("ADHIBIT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADHIBIT);
                this.columnWATER_MARK = new global::System.Data.DataColumn("WATER_MARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWATER_MARK);
                this.columnFINGER_MARK = new global::System.Data.DataColumn("FINGER_MARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINGER_MARK);
                this.columnLIGHT_LEAK = new global::System.Data.DataColumn("LIGHT_LEAK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIGHT_LEAK);
                this.columnSTATIC_SHADOW = new global::System.Data.DataColumn("STATIC_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATIC_SHADOW);
                this.columnEXTERNA_SHADOW = new global::System.Data.DataColumn("EXTERNA_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXTERNA_SHADOW);
                this.columnTOTAL_SCORE = new global::System.Data.DataColumn("TOTAL_SCORE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_SCORE);
                this.columnDISTINCTION = new global::System.Data.DataColumn("DISTINCTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTINCTION);
                this.columnNUMBER_KEY = new global::System.Data.DataColumn("NUMBER_KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER_KEY);
                this.columnD_EXPOSURE_DOSE = new global::System.Data.DataColumn("D_EXPOSURE_DOSE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_EXPOSURE_DOSE);
                this.columnD_FLAG_CONTENT = new global::System.Data.DataColumn("D_FLAG_CONTENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_FLAG_CONTENT);
                this.columnD_FLAG_PLACE_ARRANGE = new global::System.Data.DataColumn("D_FLAG_PLACE_ARRANGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_FLAG_PLACE_ARRANGE);
                this.columnD_DEVICE_SHADOW = new global::System.Data.DataColumn("D_DEVICE_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_DEVICE_SHADOW);
                this.columnUGI_PATIENT_TYPE = new global::System.Data.DataColumn("UGI_PATIENT_TYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUGI_PATIENT_TYPE);
                this.columnUGI_PATIENT_TYPE.MaxLength = 4;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UGIRow NewUGIRow() {
                return ((UGIRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UGIRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UGIRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UGIRowChanged != null)) {
                    this.UGIRowChanged(this, new UGIRowChangeEvent(((UGIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UGIRowChanging != null)) {
                    this.UGIRowChanging(this, new UGIRowChangeEvent(((UGIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UGIRowDeleted != null)) {
                    this.UGIRowDeleted(this, new UGIRowChangeEvent(((UGIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UGIRowDeleting != null)) {
                    this.UGIRowDeleting(this, new UGIRowChangeEvent(((UGIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUGIRow(UGIRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CR_DataSet ds = new CR_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UGIDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class CTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEXAM_ACCESSION_NUM;
            
            private global::System.Data.DataColumn columnPATIENT_LOCAL_ID;
            
            private global::System.Data.DataColumn columnQC_DATE;
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnPATIENT_NAME;
            
            private global::System.Data.DataColumn columnPATIENT_SEX;
            
            private global::System.Data.DataColumn columnSTUDY_DATE_TIME;
            
            private global::System.Data.DataColumn columnPOSTURE_CHOICE;
            
            private global::System.Data.DataColumn columnSCANNING_SCOPE;
            
            private global::System.Data.DataColumn columnVISCERA_SCANNING;
            
            private global::System.Data.DataColumn columnSCANNING_MODE;
            
            private global::System.Data.DataColumn columnRESOLUTION;
            
            private global::System.Data.DataColumn columnINF_CRITERION;
            
            private global::System.Data.DataColumn columnWL_WWIDTH;
            
            private global::System.Data.DataColumn columnEXTERNA_BREATH_SHADOW;
            
            private global::System.Data.DataColumn columnBASE_ASH_FOG_VALUE;
            
            private global::System.Data.DataColumn columnFILM_FORMAT;
            
            private global::System.Data.DataColumn columnBLANK_EXPOSAL_DENSITY;
            
            private global::System.Data.DataColumn columnNICK;
            
            private global::System.Data.DataColumn columnWATER_MARK;
            
            private global::System.Data.DataColumn columnFINGER_MARK;
            
            private global::System.Data.DataColumn columnLIGHT_LEAK;
            
            private global::System.Data.DataColumn columnSTATIC_SHADOW;
            
            private global::System.Data.DataColumn columnD_STRIP_SHADOW;
            
            private global::System.Data.DataColumn columnTOTAL_SCORE;
            
            private global::System.Data.DataColumn columnDISTINCTION;
            
            private global::System.Data.DataColumn columnNUMBER_KEY;
            
            private global::System.Data.DataColumn columnD_CTN;
            
            private global::System.Data.DataColumn columnD_FAST_CONSULT;
            
            private global::System.Data.DataColumn columnD_DEVICE_SHADOW;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTDataTable() {
                this.TableName = "CT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected CTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_ACCESSION_NUMColumn {
                get {
                    return this.columnEXAM_ACCESSION_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_LOCAL_IDColumn {
                get {
                    return this.columnPATIENT_LOCAL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QC_DATEColumn {
                get {
                    return this.columnQC_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMEColumn {
                get {
                    return this.columnPATIENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_SEXColumn {
                get {
                    return this.columnPATIENT_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STUDY_DATE_TIMEColumn {
                get {
                    return this.columnSTUDY_DATE_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POSTURE_CHOICEColumn {
                get {
                    return this.columnPOSTURE_CHOICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCANNING_SCOPEColumn {
                get {
                    return this.columnSCANNING_SCOPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VISCERA_SCANNINGColumn {
                get {
                    return this.columnVISCERA_SCANNING;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCANNING_MODEColumn {
                get {
                    return this.columnSCANNING_MODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESOLUTIONColumn {
                get {
                    return this.columnRESOLUTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INF_CRITERIONColumn {
                get {
                    return this.columnINF_CRITERION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WL_WWIDTHColumn {
                get {
                    return this.columnWL_WWIDTH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXTERNA_BREATH_SHADOWColumn {
                get {
                    return this.columnEXTERNA_BREATH_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BASE_ASH_FOG_VALUEColumn {
                get {
                    return this.columnBASE_ASH_FOG_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILM_FORMATColumn {
                get {
                    return this.columnFILM_FORMAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BLANK_EXPOSAL_DENSITYColumn {
                get {
                    return this.columnBLANK_EXPOSAL_DENSITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NICKColumn {
                get {
                    return this.columnNICK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WATER_MARKColumn {
                get {
                    return this.columnWATER_MARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FINGER_MARKColumn {
                get {
                    return this.columnFINGER_MARK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LIGHT_LEAKColumn {
                get {
                    return this.columnLIGHT_LEAK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STATIC_SHADOWColumn {
                get {
                    return this.columnSTATIC_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_STRIP_SHADOWColumn {
                get {
                    return this.columnD_STRIP_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_SCOREColumn {
                get {
                    return this.columnTOTAL_SCORE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISTINCTIONColumn {
                get {
                    return this.columnDISTINCTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBER_KEYColumn {
                get {
                    return this.columnNUMBER_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_CTNColumn {
                get {
                    return this.columnD_CTN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_FAST_CONSULTColumn {
                get {
                    return this.columnD_FAST_CONSULT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_DEVICE_SHADOWColumn {
                get {
                    return this.columnD_DEVICE_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTRow this[int index] {
                get {
                    return ((CTRow)(this.Rows[index]));
                }
            }
            
            public event CTRowChangeEventHandler CTRowChanging;
            
            public event CTRowChangeEventHandler CTRowChanged;
            
            public event CTRowChangeEventHandler CTRowDeleting;
            
            public event CTRowChangeEventHandler CTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddCTRow(CTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTRow AddCTRow(
                        string EXAM_ACCESSION_NUM, 
                        string PATIENT_LOCAL_ID, 
                        string QC_DATE, 
                        string PATIENT_ID, 
                        string PATIENT_NAME, 
                        string PATIENT_SEX, 
                        string STUDY_DATE_TIME, 
                        string POSTURE_CHOICE, 
                        string SCANNING_SCOPE, 
                        string VISCERA_SCANNING, 
                        string SCANNING_MODE, 
                        string RESOLUTION, 
                        string INF_CRITERION, 
                        string WL_WWIDTH, 
                        string EXTERNA_BREATH_SHADOW, 
                        string BASE_ASH_FOG_VALUE, 
                        string FILM_FORMAT, 
                        string BLANK_EXPOSAL_DENSITY, 
                        string NICK, 
                        string WATER_MARK, 
                        string FINGER_MARK, 
                        string LIGHT_LEAK, 
                        string STATIC_SHADOW, 
                        string D_STRIP_SHADOW, 
                        string TOTAL_SCORE, 
                        string DISTINCTION, 
                        string NUMBER_KEY, 
                        string D_CTN, 
                        string D_FAST_CONSULT, 
                        string D_DEVICE_SHADOW) {
                CTRow rowCTRow = ((CTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EXAM_ACCESSION_NUM,
                        PATIENT_LOCAL_ID,
                        QC_DATE,
                        PATIENT_ID,
                        PATIENT_NAME,
                        PATIENT_SEX,
                        STUDY_DATE_TIME,
                        POSTURE_CHOICE,
                        SCANNING_SCOPE,
                        VISCERA_SCANNING,
                        SCANNING_MODE,
                        RESOLUTION,
                        INF_CRITERION,
                        WL_WWIDTH,
                        EXTERNA_BREATH_SHADOW,
                        BASE_ASH_FOG_VALUE,
                        FILM_FORMAT,
                        BLANK_EXPOSAL_DENSITY,
                        NICK,
                        WATER_MARK,
                        FINGER_MARK,
                        LIGHT_LEAK,
                        STATIC_SHADOW,
                        D_STRIP_SHADOW,
                        TOTAL_SCORE,
                        DISTINCTION,
                        NUMBER_KEY,
                        D_CTN,
                        D_FAST_CONSULT,
                        D_DEVICE_SHADOW};
                rowCTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowCTRow);
                return rowCTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                CTDataTable cln = ((CTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new CTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEXAM_ACCESSION_NUM = base.Columns["EXAM_ACCESSION_NUM"];
                this.columnPATIENT_LOCAL_ID = base.Columns["PATIENT_LOCAL_ID"];
                this.columnQC_DATE = base.Columns["QC_DATE"];
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnPATIENT_NAME = base.Columns["PATIENT_NAME"];
                this.columnPATIENT_SEX = base.Columns["PATIENT_SEX"];
                this.columnSTUDY_DATE_TIME = base.Columns["STUDY_DATE_TIME"];
                this.columnPOSTURE_CHOICE = base.Columns["POSTURE_CHOICE"];
                this.columnSCANNING_SCOPE = base.Columns["SCANNING_SCOPE"];
                this.columnVISCERA_SCANNING = base.Columns["VISCERA_SCANNING"];
                this.columnSCANNING_MODE = base.Columns["SCANNING_MODE"];
                this.columnRESOLUTION = base.Columns["RESOLUTION"];
                this.columnINF_CRITERION = base.Columns["INF_CRITERION"];
                this.columnWL_WWIDTH = base.Columns["WL_WWIDTH"];
                this.columnEXTERNA_BREATH_SHADOW = base.Columns["EXTERNA_BREATH_SHADOW"];
                this.columnBASE_ASH_FOG_VALUE = base.Columns["BASE_ASH_FOG_VALUE"];
                this.columnFILM_FORMAT = base.Columns["FILM_FORMAT"];
                this.columnBLANK_EXPOSAL_DENSITY = base.Columns["BLANK_EXPOSAL_DENSITY"];
                this.columnNICK = base.Columns["NICK"];
                this.columnWATER_MARK = base.Columns["WATER_MARK"];
                this.columnFINGER_MARK = base.Columns["FINGER_MARK"];
                this.columnLIGHT_LEAK = base.Columns["LIGHT_LEAK"];
                this.columnSTATIC_SHADOW = base.Columns["STATIC_SHADOW"];
                this.columnD_STRIP_SHADOW = base.Columns["D_STRIP_SHADOW"];
                this.columnTOTAL_SCORE = base.Columns["TOTAL_SCORE"];
                this.columnDISTINCTION = base.Columns["DISTINCTION"];
                this.columnNUMBER_KEY = base.Columns["NUMBER_KEY"];
                this.columnD_CTN = base.Columns["D_CTN"];
                this.columnD_FAST_CONSULT = base.Columns["D_FAST_CONSULT"];
                this.columnD_DEVICE_SHADOW = base.Columns["D_DEVICE_SHADOW"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEXAM_ACCESSION_NUM = new global::System.Data.DataColumn("EXAM_ACCESSION_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_ACCESSION_NUM);
                this.columnPATIENT_LOCAL_ID = new global::System.Data.DataColumn("PATIENT_LOCAL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_LOCAL_ID);
                this.columnQC_DATE = new global::System.Data.DataColumn("QC_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQC_DATE);
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnPATIENT_NAME = new global::System.Data.DataColumn("PATIENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAME);
                this.columnPATIENT_SEX = new global::System.Data.DataColumn("PATIENT_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_SEX);
                this.columnSTUDY_DATE_TIME = new global::System.Data.DataColumn("STUDY_DATE_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTUDY_DATE_TIME);
                this.columnPOSTURE_CHOICE = new global::System.Data.DataColumn("POSTURE_CHOICE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOSTURE_CHOICE);
                this.columnSCANNING_SCOPE = new global::System.Data.DataColumn("SCANNING_SCOPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCANNING_SCOPE);
                this.columnVISCERA_SCANNING = new global::System.Data.DataColumn("VISCERA_SCANNING", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVISCERA_SCANNING);
                this.columnSCANNING_MODE = new global::System.Data.DataColumn("SCANNING_MODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCANNING_MODE);
                this.columnRESOLUTION = new global::System.Data.DataColumn("RESOLUTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESOLUTION);
                this.columnINF_CRITERION = new global::System.Data.DataColumn("INF_CRITERION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINF_CRITERION);
                this.columnWL_WWIDTH = new global::System.Data.DataColumn("WL_WWIDTH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWL_WWIDTH);
                this.columnEXTERNA_BREATH_SHADOW = new global::System.Data.DataColumn("EXTERNA_BREATH_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXTERNA_BREATH_SHADOW);
                this.columnBASE_ASH_FOG_VALUE = new global::System.Data.DataColumn("BASE_ASH_FOG_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBASE_ASH_FOG_VALUE);
                this.columnFILM_FORMAT = new global::System.Data.DataColumn("FILM_FORMAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILM_FORMAT);
                this.columnBLANK_EXPOSAL_DENSITY = new global::System.Data.DataColumn("BLANK_EXPOSAL_DENSITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBLANK_EXPOSAL_DENSITY);
                this.columnNICK = new global::System.Data.DataColumn("NICK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNICK);
                this.columnWATER_MARK = new global::System.Data.DataColumn("WATER_MARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWATER_MARK);
                this.columnFINGER_MARK = new global::System.Data.DataColumn("FINGER_MARK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFINGER_MARK);
                this.columnLIGHT_LEAK = new global::System.Data.DataColumn("LIGHT_LEAK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLIGHT_LEAK);
                this.columnSTATIC_SHADOW = new global::System.Data.DataColumn("STATIC_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTATIC_SHADOW);
                this.columnD_STRIP_SHADOW = new global::System.Data.DataColumn("D_STRIP_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_STRIP_SHADOW);
                this.columnTOTAL_SCORE = new global::System.Data.DataColumn("TOTAL_SCORE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_SCORE);
                this.columnDISTINCTION = new global::System.Data.DataColumn("DISTINCTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTINCTION);
                this.columnNUMBER_KEY = new global::System.Data.DataColumn("NUMBER_KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER_KEY);
                this.columnD_CTN = new global::System.Data.DataColumn("D_CTN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_CTN);
                this.columnD_FAST_CONSULT = new global::System.Data.DataColumn("D_FAST_CONSULT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_FAST_CONSULT);
                this.columnD_DEVICE_SHADOW = new global::System.Data.DataColumn("D_DEVICE_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_DEVICE_SHADOW);
                this.columnPOSTURE_CHOICE.Caption = "STERNUM_BREAST";
                this.columnSCANNING_SCOPE.Caption = "STERNUM_BLADEBONE";
                this.columnVISCERA_SCANNING.Caption = "STERNUM_BOARD";
                this.columnSCANNING_MODE.Caption = "STERNUM_IMAGE_DISTORTION";
                this.columnRESOLUTION.Caption = "STERNUM_ARRANGEMENT_FOCUS";
                this.columnINF_CRITERION.Caption = "STERNUM_FIRST_FORTH_WHETTLE";
                this.columnWL_WWIDTH.Caption = "STERNUM_LETTER_NO";
                this.columnEXTERNA_BREATH_SHADOW.Caption = "STERNUM_LETTER_ARRANGE";
                this.columnFILM_FORMAT.Caption = "DIAGNOSE_AREA_VALUE";
                this.columnNICK.Caption = "DIRT";
                this.columnD_STRIP_SHADOW.Caption = "EXTERNA_SHADOW";
                this.columnD_CTN.Caption = "D_STERNUM_ARRANGEMENT_FOCUS";
                this.columnD_FAST_CONSULT.Caption = "D_STERNUM_LUNG_MARKINGS";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTRow NewCTRow() {
                return ((CTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new CTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(CTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.CTRowChanged != null)) {
                    this.CTRowChanged(this, new CTRowChangeEvent(((CTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.CTRowChanging != null)) {
                    this.CTRowChanging(this, new CTRowChangeEvent(((CTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.CTRowDeleted != null)) {
                    this.CTRowDeleted(this, new CTRowChangeEvent(((CTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.CTRowDeleting != null)) {
                    this.CTRowDeleting(this, new CTRowChangeEvent(((CTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveCTRow(CTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CR_DataSet ds = new CR_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "CTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MRIDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEXAM_ACCESSION_NUM;
            
            private global::System.Data.DataColumn columnPATIENT_LOCAL_ID;
            
            private global::System.Data.DataColumn columnQC_DATE;
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnPATIENT_NAME;
            
            private global::System.Data.DataColumn columnPATIENT_SEX;
            
            private global::System.Data.DataColumn columnSTUDY_DATE_TIME;
            
            private global::System.Data.DataColumn columnPOSTURE_CHOICE;
            
            private global::System.Data.DataColumn columnSCANNING_SCOPE;
            
            private global::System.Data.DataColumn columnVISCERA_SCANNING;
            
            private global::System.Data.DataColumn columnRESOLUTION;
            
            private global::System.Data.DataColumn columnINF_CRITERION;
            
            private global::System.Data.DataColumn columnSCANNING_MODE;
            
            private global::System.Data.DataColumn columnSERIES_LEVEL_NUMBER;
            
            private global::System.Data.DataColumn columnEXTERNA_METAL_SHADOW;
            
            private global::System.Data.DataColumn columnBASE_ASH_FOG_VALUE;
            
            private global::System.Data.DataColumn columnBRIM_BACKGROUND_DENSITY;
            
            private global::System.Data.DataColumn columnFILM_FORMAT;
            
            private global::System.Data.DataColumn columnOPE_RESULT;
            
            private global::System.Data.DataColumn columnD_STRUCTURE_RESOLUTION;
            
            private global::System.Data.DataColumn columnD_HIST_CONTRAST;
            
            private global::System.Data.DataColumn columnD_FAST_CONSULT;
            
            private global::System.Data.DataColumn columnTOTAL_SCORE;
            
            private global::System.Data.DataColumn columnDISTINCTION;
            
            private global::System.Data.DataColumn columnNUMBER_KEY;
            
            private global::System.Data.DataColumn columnD_DEVICE_SHADOW;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MRIDataTable() {
                this.TableName = "MRI";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MRIDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MRIDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_ACCESSION_NUMColumn {
                get {
                    return this.columnEXAM_ACCESSION_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_LOCAL_IDColumn {
                get {
                    return this.columnPATIENT_LOCAL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QC_DATEColumn {
                get {
                    return this.columnQC_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMEColumn {
                get {
                    return this.columnPATIENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_SEXColumn {
                get {
                    return this.columnPATIENT_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STUDY_DATE_TIMEColumn {
                get {
                    return this.columnSTUDY_DATE_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POSTURE_CHOICEColumn {
                get {
                    return this.columnPOSTURE_CHOICE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCANNING_SCOPEColumn {
                get {
                    return this.columnSCANNING_SCOPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VISCERA_SCANNINGColumn {
                get {
                    return this.columnVISCERA_SCANNING;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESOLUTIONColumn {
                get {
                    return this.columnRESOLUTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INF_CRITERIONColumn {
                get {
                    return this.columnINF_CRITERION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SCANNING_MODEColumn {
                get {
                    return this.columnSCANNING_MODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERIES_LEVEL_NUMBERColumn {
                get {
                    return this.columnSERIES_LEVEL_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXTERNA_METAL_SHADOWColumn {
                get {
                    return this.columnEXTERNA_METAL_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BASE_ASH_FOG_VALUEColumn {
                get {
                    return this.columnBASE_ASH_FOG_VALUE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BRIM_BACKGROUND_DENSITYColumn {
                get {
                    return this.columnBRIM_BACKGROUND_DENSITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FILM_FORMATColumn {
                get {
                    return this.columnFILM_FORMAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPE_RESULTColumn {
                get {
                    return this.columnOPE_RESULT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_STRUCTURE_RESOLUTIONColumn {
                get {
                    return this.columnD_STRUCTURE_RESOLUTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_HIST_CONTRASTColumn {
                get {
                    return this.columnD_HIST_CONTRAST;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_FAST_CONSULTColumn {
                get {
                    return this.columnD_FAST_CONSULT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_SCOREColumn {
                get {
                    return this.columnTOTAL_SCORE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISTINCTIONColumn {
                get {
                    return this.columnDISTINCTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBER_KEYColumn {
                get {
                    return this.columnNUMBER_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn D_DEVICE_SHADOWColumn {
                get {
                    return this.columnD_DEVICE_SHADOW;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MRIRow this[int index] {
                get {
                    return ((MRIRow)(this.Rows[index]));
                }
            }
            
            public event MRIRowChangeEventHandler MRIRowChanging;
            
            public event MRIRowChangeEventHandler MRIRowChanged;
            
            public event MRIRowChangeEventHandler MRIRowDeleting;
            
            public event MRIRowChangeEventHandler MRIRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMRIRow(MRIRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MRIRow AddMRIRow(
                        string EXAM_ACCESSION_NUM, 
                        string PATIENT_LOCAL_ID, 
                        string QC_DATE, 
                        string PATIENT_ID, 
                        string PATIENT_NAME, 
                        string PATIENT_SEX, 
                        string STUDY_DATE_TIME, 
                        string POSTURE_CHOICE, 
                        string SCANNING_SCOPE, 
                        string VISCERA_SCANNING, 
                        string RESOLUTION, 
                        string INF_CRITERION, 
                        string SCANNING_MODE, 
                        string SERIES_LEVEL_NUMBER, 
                        string EXTERNA_METAL_SHADOW, 
                        string BASE_ASH_FOG_VALUE, 
                        string BRIM_BACKGROUND_DENSITY, 
                        string FILM_FORMAT, 
                        string OPE_RESULT, 
                        string D_STRUCTURE_RESOLUTION, 
                        string D_HIST_CONTRAST, 
                        string D_FAST_CONSULT, 
                        string TOTAL_SCORE, 
                        string DISTINCTION, 
                        string NUMBER_KEY, 
                        string D_DEVICE_SHADOW) {
                MRIRow rowMRIRow = ((MRIRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EXAM_ACCESSION_NUM,
                        PATIENT_LOCAL_ID,
                        QC_DATE,
                        PATIENT_ID,
                        PATIENT_NAME,
                        PATIENT_SEX,
                        STUDY_DATE_TIME,
                        POSTURE_CHOICE,
                        SCANNING_SCOPE,
                        VISCERA_SCANNING,
                        RESOLUTION,
                        INF_CRITERION,
                        SCANNING_MODE,
                        SERIES_LEVEL_NUMBER,
                        EXTERNA_METAL_SHADOW,
                        BASE_ASH_FOG_VALUE,
                        BRIM_BACKGROUND_DENSITY,
                        FILM_FORMAT,
                        OPE_RESULT,
                        D_STRUCTURE_RESOLUTION,
                        D_HIST_CONTRAST,
                        D_FAST_CONSULT,
                        TOTAL_SCORE,
                        DISTINCTION,
                        NUMBER_KEY,
                        D_DEVICE_SHADOW};
                rowMRIRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMRIRow);
                return rowMRIRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MRIDataTable cln = ((MRIDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MRIDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEXAM_ACCESSION_NUM = base.Columns["EXAM_ACCESSION_NUM"];
                this.columnPATIENT_LOCAL_ID = base.Columns["PATIENT_LOCAL_ID"];
                this.columnQC_DATE = base.Columns["QC_DATE"];
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnPATIENT_NAME = base.Columns["PATIENT_NAME"];
                this.columnPATIENT_SEX = base.Columns["PATIENT_SEX"];
                this.columnSTUDY_DATE_TIME = base.Columns["STUDY_DATE_TIME"];
                this.columnPOSTURE_CHOICE = base.Columns["POSTURE_CHOICE"];
                this.columnSCANNING_SCOPE = base.Columns["SCANNING_SCOPE"];
                this.columnVISCERA_SCANNING = base.Columns["VISCERA_SCANNING"];
                this.columnRESOLUTION = base.Columns["RESOLUTION"];
                this.columnINF_CRITERION = base.Columns["INF_CRITERION"];
                this.columnSCANNING_MODE = base.Columns["SCANNING_MODE"];
                this.columnSERIES_LEVEL_NUMBER = base.Columns["SERIES_LEVEL_NUMBER"];
                this.columnEXTERNA_METAL_SHADOW = base.Columns["EXTERNA_METAL_SHADOW"];
                this.columnBASE_ASH_FOG_VALUE = base.Columns["BASE_ASH_FOG_VALUE"];
                this.columnBRIM_BACKGROUND_DENSITY = base.Columns["BRIM_BACKGROUND_DENSITY"];
                this.columnFILM_FORMAT = base.Columns["FILM_FORMAT"];
                this.columnOPE_RESULT = base.Columns["OPE_RESULT"];
                this.columnD_STRUCTURE_RESOLUTION = base.Columns["D_STRUCTURE_RESOLUTION"];
                this.columnD_HIST_CONTRAST = base.Columns["D_HIST_CONTRAST"];
                this.columnD_FAST_CONSULT = base.Columns["D_FAST_CONSULT"];
                this.columnTOTAL_SCORE = base.Columns["TOTAL_SCORE"];
                this.columnDISTINCTION = base.Columns["DISTINCTION"];
                this.columnNUMBER_KEY = base.Columns["NUMBER_KEY"];
                this.columnD_DEVICE_SHADOW = base.Columns["D_DEVICE_SHADOW"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEXAM_ACCESSION_NUM = new global::System.Data.DataColumn("EXAM_ACCESSION_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_ACCESSION_NUM);
                this.columnPATIENT_LOCAL_ID = new global::System.Data.DataColumn("PATIENT_LOCAL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_LOCAL_ID);
                this.columnQC_DATE = new global::System.Data.DataColumn("QC_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQC_DATE);
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnPATIENT_NAME = new global::System.Data.DataColumn("PATIENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAME);
                this.columnPATIENT_SEX = new global::System.Data.DataColumn("PATIENT_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_SEX);
                this.columnSTUDY_DATE_TIME = new global::System.Data.DataColumn("STUDY_DATE_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTUDY_DATE_TIME);
                this.columnPOSTURE_CHOICE = new global::System.Data.DataColumn("POSTURE_CHOICE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOSTURE_CHOICE);
                this.columnSCANNING_SCOPE = new global::System.Data.DataColumn("SCANNING_SCOPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCANNING_SCOPE);
                this.columnVISCERA_SCANNING = new global::System.Data.DataColumn("VISCERA_SCANNING", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVISCERA_SCANNING);
                this.columnRESOLUTION = new global::System.Data.DataColumn("RESOLUTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESOLUTION);
                this.columnINF_CRITERION = new global::System.Data.DataColumn("INF_CRITERION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINF_CRITERION);
                this.columnSCANNING_MODE = new global::System.Data.DataColumn("SCANNING_MODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSCANNING_MODE);
                this.columnSERIES_LEVEL_NUMBER = new global::System.Data.DataColumn("SERIES_LEVEL_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERIES_LEVEL_NUMBER);
                this.columnEXTERNA_METAL_SHADOW = new global::System.Data.DataColumn("EXTERNA_METAL_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXTERNA_METAL_SHADOW);
                this.columnBASE_ASH_FOG_VALUE = new global::System.Data.DataColumn("BASE_ASH_FOG_VALUE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBASE_ASH_FOG_VALUE);
                this.columnBRIM_BACKGROUND_DENSITY = new global::System.Data.DataColumn("BRIM_BACKGROUND_DENSITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBRIM_BACKGROUND_DENSITY);
                this.columnFILM_FORMAT = new global::System.Data.DataColumn("FILM_FORMAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFILM_FORMAT);
                this.columnOPE_RESULT = new global::System.Data.DataColumn("OPE_RESULT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPE_RESULT);
                this.columnD_STRUCTURE_RESOLUTION = new global::System.Data.DataColumn("D_STRUCTURE_RESOLUTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_STRUCTURE_RESOLUTION);
                this.columnD_HIST_CONTRAST = new global::System.Data.DataColumn("D_HIST_CONTRAST", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_HIST_CONTRAST);
                this.columnD_FAST_CONSULT = new global::System.Data.DataColumn("D_FAST_CONSULT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_FAST_CONSULT);
                this.columnTOTAL_SCORE = new global::System.Data.DataColumn("TOTAL_SCORE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_SCORE);
                this.columnDISTINCTION = new global::System.Data.DataColumn("DISTINCTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTINCTION);
                this.columnNUMBER_KEY = new global::System.Data.DataColumn("NUMBER_KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER_KEY);
                this.columnD_DEVICE_SHADOW = new global::System.Data.DataColumn("D_DEVICE_SHADOW", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnD_DEVICE_SHADOW);
                this.columnPOSTURE_CHOICE.Caption = "STERNUM_BREAST";
                this.columnSCANNING_SCOPE.Caption = "STERNUM_BLADEBONE";
                this.columnVISCERA_SCANNING.Caption = "STERNUM_BOARD";
                this.columnRESOLUTION.Caption = "STERNUM_IMAGE_DISTORTION";
                this.columnINF_CRITERION.Caption = "STERNUM_ARRANGEMENT_FOCUS";
                this.columnSCANNING_MODE.Caption = "STERNUM_FIRST_FORTH_WHETTLE";
                this.columnSERIES_LEVEL_NUMBER.Caption = "STERNUM_LETTER_NO";
                this.columnEXTERNA_METAL_SHADOW.Caption = "STERNUM_LETTER_ARRANGE";
                this.columnBRIM_BACKGROUND_DENSITY.Caption = "DIAGNOSE_AREA_VALUE";
                this.columnFILM_FORMAT.Caption = "BLANK_EXPOSAL_DENSITY";
                this.columnOPE_RESULT.Caption = "DIRT";
                this.columnD_STRUCTURE_RESOLUTION.Caption = "NICK";
                this.columnD_HIST_CONTRAST.Caption = "ADHIBIT";
                this.columnD_FAST_CONSULT.Caption = "WATER_MARK";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MRIRow NewMRIRow() {
                return ((MRIRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MRIRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MRIRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MRIRowChanged != null)) {
                    this.MRIRowChanged(this, new MRIRowChangeEvent(((MRIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MRIRowChanging != null)) {
                    this.MRIRowChanging(this, new MRIRowChangeEvent(((MRIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MRIRowDeleted != null)) {
                    this.MRIRowDeleted(this, new MRIRowChangeEvent(((MRIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MRIRowDeleting != null)) {
                    this.MRIRowDeleting(this, new MRIRowChangeEvent(((MRIRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMRIRow(MRIRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CR_DataSet ds = new CR_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MRIDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DEPT_MAN_DICTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDEPT_MAN_KEY;
            
            private global::System.Data.DataColumn columnQC_DATE;
            
            private global::System.Data.DataColumn columnRY_LICENCE;
            
            private global::System.Data.DataColumn columnDEDU_GIST_RY_LICENCE;
            
            private global::System.Data.DataColumn columnTITLES;
            
            private global::System.Data.DataColumn columnDEDU_GIST_TITLES;
            
            private global::System.Data.DataColumn columnPOST_TRAIN;
            
            private global::System.Data.DataColumn columnDEDU_GIST_POST_TRAIN;
            
            private global::System.Data.DataColumn columnCRITERION_INTEGRALITY;
            
            private global::System.Data.DataColumn columnDEDU_GIST_CRI_INT;
            
            private global::System.Data.DataColumn columnMANAGEMENT_SYSTEM;
            
            private global::System.Data.DataColumn columnDEDU_GIST_MAN_SYS;
            
            private global::System.Data.DataColumn columnIMAGE_SYSTEM;
            
            private global::System.Data.DataColumn columnDEDU_GIST_IMAGE_SYS;
            
            private global::System.Data.DataColumn columnPREVENTIVE_MEASURE;
            
            private global::System.Data.DataColumn columnDEDU_GIST_PRE_MEA;
            
            private global::System.Data.DataColumn columnSERVICES_ITEMS;
            
            private global::System.Data.DataColumn columnDEDU_GIST_SER_ITEMS;
            
            private global::System.Data.DataColumn columnEMERGENCY_EXAM;
            
            private global::System.Data.DataColumn columnDEDU_GIST_EME_EXAM;
            
            private global::System.Data.DataColumn columnDIAG_REPORT;
            
            private global::System.Data.DataColumn columnDEDU_GIST_DIAG_RPT;
            
            private global::System.Data.DataColumn columnMANAGEMENT;
            
            private global::System.Data.DataColumn columnDEDU_GIST_MANAGEMENT;
            
            private global::System.Data.DataColumn columnREGISTER_STAT;
            
            private global::System.Data.DataColumn columnDEDU_GIST_REG_STAT;
            
            private global::System.Data.DataColumn columnOVERSEE_RESULT;
            
            private global::System.Data.DataColumn columnDEDU_GIST_OS_RES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPT_MAN_DICTDataTable() {
                this.TableName = "DEPT_MAN_DICT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DEPT_MAN_DICTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected DEPT_MAN_DICTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEPT_MAN_KEYColumn {
                get {
                    return this.columnDEPT_MAN_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QC_DATEColumn {
                get {
                    return this.columnQC_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RY_LICENCEColumn {
                get {
                    return this.columnRY_LICENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_RY_LICENCEColumn {
                get {
                    return this.columnDEDU_GIST_RY_LICENCE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TITLESColumn {
                get {
                    return this.columnTITLES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_TITLESColumn {
                get {
                    return this.columnDEDU_GIST_TITLES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn POST_TRAINColumn {
                get {
                    return this.columnPOST_TRAIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_POST_TRAINColumn {
                get {
                    return this.columnDEDU_GIST_POST_TRAIN;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CRITERION_INTEGRALITYColumn {
                get {
                    return this.columnCRITERION_INTEGRALITY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_CRI_INTColumn {
                get {
                    return this.columnDEDU_GIST_CRI_INT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MANAGEMENT_SYSTEMColumn {
                get {
                    return this.columnMANAGEMENT_SYSTEM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_MAN_SYSColumn {
                get {
                    return this.columnDEDU_GIST_MAN_SYS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IMAGE_SYSTEMColumn {
                get {
                    return this.columnIMAGE_SYSTEM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_IMAGE_SYSColumn {
                get {
                    return this.columnDEDU_GIST_IMAGE_SYS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PREVENTIVE_MEASUREColumn {
                get {
                    return this.columnPREVENTIVE_MEASURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_PRE_MEAColumn {
                get {
                    return this.columnDEDU_GIST_PRE_MEA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SERVICES_ITEMSColumn {
                get {
                    return this.columnSERVICES_ITEMS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_SER_ITEMSColumn {
                get {
                    return this.columnDEDU_GIST_SER_ITEMS;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EMERGENCY_EXAMColumn {
                get {
                    return this.columnEMERGENCY_EXAM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_EME_EXAMColumn {
                get {
                    return this.columnDEDU_GIST_EME_EXAM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DIAG_REPORTColumn {
                get {
                    return this.columnDIAG_REPORT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_DIAG_RPTColumn {
                get {
                    return this.columnDEDU_GIST_DIAG_RPT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MANAGEMENTColumn {
                get {
                    return this.columnMANAGEMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_MANAGEMENTColumn {
                get {
                    return this.columnDEDU_GIST_MANAGEMENT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn REGISTER_STATColumn {
                get {
                    return this.columnREGISTER_STAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_REG_STATColumn {
                get {
                    return this.columnDEDU_GIST_REG_STAT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OVERSEE_RESULTColumn {
                get {
                    return this.columnOVERSEE_RESULT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DEDU_GIST_OS_RESColumn {
                get {
                    return this.columnDEDU_GIST_OS_RES;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPT_MAN_DICTRow this[int index] {
                get {
                    return ((DEPT_MAN_DICTRow)(this.Rows[index]));
                }
            }
            
            public event DEPT_MAN_DICTRowChangeEventHandler DEPT_MAN_DICTRowChanging;
            
            public event DEPT_MAN_DICTRowChangeEventHandler DEPT_MAN_DICTRowChanged;
            
            public event DEPT_MAN_DICTRowChangeEventHandler DEPT_MAN_DICTRowDeleting;
            
            public event DEPT_MAN_DICTRowChangeEventHandler DEPT_MAN_DICTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDEPT_MAN_DICTRow(DEPT_MAN_DICTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPT_MAN_DICTRow AddDEPT_MAN_DICTRow(
                        string DEPT_MAN_KEY, 
                        string QC_DATE, 
                        string RY_LICENCE, 
                        string DEDU_GIST_RY_LICENCE, 
                        string TITLES, 
                        string DEDU_GIST_TITLES, 
                        string POST_TRAIN, 
                        string DEDU_GIST_POST_TRAIN, 
                        string CRITERION_INTEGRALITY, 
                        string DEDU_GIST_CRI_INT, 
                        string MANAGEMENT_SYSTEM, 
                        string DEDU_GIST_MAN_SYS, 
                        string IMAGE_SYSTEM, 
                        string DEDU_GIST_IMAGE_SYS, 
                        string PREVENTIVE_MEASURE, 
                        string DEDU_GIST_PRE_MEA, 
                        string SERVICES_ITEMS, 
                        string DEDU_GIST_SER_ITEMS, 
                        string EMERGENCY_EXAM, 
                        string DEDU_GIST_EME_EXAM, 
                        string DIAG_REPORT, 
                        string DEDU_GIST_DIAG_RPT, 
                        string MANAGEMENT, 
                        string DEDU_GIST_MANAGEMENT, 
                        string REGISTER_STAT, 
                        string DEDU_GIST_REG_STAT, 
                        string OVERSEE_RESULT, 
                        string DEDU_GIST_OS_RES) {
                DEPT_MAN_DICTRow rowDEPT_MAN_DICTRow = ((DEPT_MAN_DICTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DEPT_MAN_KEY,
                        QC_DATE,
                        RY_LICENCE,
                        DEDU_GIST_RY_LICENCE,
                        TITLES,
                        DEDU_GIST_TITLES,
                        POST_TRAIN,
                        DEDU_GIST_POST_TRAIN,
                        CRITERION_INTEGRALITY,
                        DEDU_GIST_CRI_INT,
                        MANAGEMENT_SYSTEM,
                        DEDU_GIST_MAN_SYS,
                        IMAGE_SYSTEM,
                        DEDU_GIST_IMAGE_SYS,
                        PREVENTIVE_MEASURE,
                        DEDU_GIST_PRE_MEA,
                        SERVICES_ITEMS,
                        DEDU_GIST_SER_ITEMS,
                        EMERGENCY_EXAM,
                        DEDU_GIST_EME_EXAM,
                        DIAG_REPORT,
                        DEDU_GIST_DIAG_RPT,
                        MANAGEMENT,
                        DEDU_GIST_MANAGEMENT,
                        REGISTER_STAT,
                        DEDU_GIST_REG_STAT,
                        OVERSEE_RESULT,
                        DEDU_GIST_OS_RES};
                rowDEPT_MAN_DICTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDEPT_MAN_DICTRow);
                return rowDEPT_MAN_DICTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DEPT_MAN_DICTDataTable cln = ((DEPT_MAN_DICTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DEPT_MAN_DICTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDEPT_MAN_KEY = base.Columns["DEPT_MAN_KEY"];
                this.columnQC_DATE = base.Columns["QC_DATE"];
                this.columnRY_LICENCE = base.Columns["RY_LICENCE"];
                this.columnDEDU_GIST_RY_LICENCE = base.Columns["DEDU_GIST_RY_LICENCE"];
                this.columnTITLES = base.Columns["TITLES"];
                this.columnDEDU_GIST_TITLES = base.Columns["DEDU_GIST_TITLES"];
                this.columnPOST_TRAIN = base.Columns["POST_TRAIN"];
                this.columnDEDU_GIST_POST_TRAIN = base.Columns["DEDU_GIST_POST_TRAIN"];
                this.columnCRITERION_INTEGRALITY = base.Columns["CRITERION_INTEGRALITY"];
                this.columnDEDU_GIST_CRI_INT = base.Columns["DEDU_GIST_CRI_INT"];
                this.columnMANAGEMENT_SYSTEM = base.Columns["MANAGEMENT_SYSTEM"];
                this.columnDEDU_GIST_MAN_SYS = base.Columns["DEDU_GIST_MAN_SYS"];
                this.columnIMAGE_SYSTEM = base.Columns["IMAGE_SYSTEM"];
                this.columnDEDU_GIST_IMAGE_SYS = base.Columns["DEDU_GIST_IMAGE_SYS"];
                this.columnPREVENTIVE_MEASURE = base.Columns["PREVENTIVE_MEASURE"];
                this.columnDEDU_GIST_PRE_MEA = base.Columns["DEDU_GIST_PRE_MEA"];
                this.columnSERVICES_ITEMS = base.Columns["SERVICES_ITEMS"];
                this.columnDEDU_GIST_SER_ITEMS = base.Columns["DEDU_GIST_SER_ITEMS"];
                this.columnEMERGENCY_EXAM = base.Columns["EMERGENCY_EXAM"];
                this.columnDEDU_GIST_EME_EXAM = base.Columns["DEDU_GIST_EME_EXAM"];
                this.columnDIAG_REPORT = base.Columns["DIAG_REPORT"];
                this.columnDEDU_GIST_DIAG_RPT = base.Columns["DEDU_GIST_DIAG_RPT"];
                this.columnMANAGEMENT = base.Columns["MANAGEMENT"];
                this.columnDEDU_GIST_MANAGEMENT = base.Columns["DEDU_GIST_MANAGEMENT"];
                this.columnREGISTER_STAT = base.Columns["REGISTER_STAT"];
                this.columnDEDU_GIST_REG_STAT = base.Columns["DEDU_GIST_REG_STAT"];
                this.columnOVERSEE_RESULT = base.Columns["OVERSEE_RESULT"];
                this.columnDEDU_GIST_OS_RES = base.Columns["DEDU_GIST_OS_RES"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDEPT_MAN_KEY = new global::System.Data.DataColumn("DEPT_MAN_KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEPT_MAN_KEY);
                this.columnQC_DATE = new global::System.Data.DataColumn("QC_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQC_DATE);
                this.columnRY_LICENCE = new global::System.Data.DataColumn("RY_LICENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRY_LICENCE);
                this.columnDEDU_GIST_RY_LICENCE = new global::System.Data.DataColumn("DEDU_GIST_RY_LICENCE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_RY_LICENCE);
                this.columnTITLES = new global::System.Data.DataColumn("TITLES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTITLES);
                this.columnDEDU_GIST_TITLES = new global::System.Data.DataColumn("DEDU_GIST_TITLES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_TITLES);
                this.columnPOST_TRAIN = new global::System.Data.DataColumn("POST_TRAIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPOST_TRAIN);
                this.columnDEDU_GIST_POST_TRAIN = new global::System.Data.DataColumn("DEDU_GIST_POST_TRAIN", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_POST_TRAIN);
                this.columnCRITERION_INTEGRALITY = new global::System.Data.DataColumn("CRITERION_INTEGRALITY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCRITERION_INTEGRALITY);
                this.columnDEDU_GIST_CRI_INT = new global::System.Data.DataColumn("DEDU_GIST_CRI_INT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_CRI_INT);
                this.columnMANAGEMENT_SYSTEM = new global::System.Data.DataColumn("MANAGEMENT_SYSTEM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMANAGEMENT_SYSTEM);
                this.columnDEDU_GIST_MAN_SYS = new global::System.Data.DataColumn("DEDU_GIST_MAN_SYS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_MAN_SYS);
                this.columnIMAGE_SYSTEM = new global::System.Data.DataColumn("IMAGE_SYSTEM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIMAGE_SYSTEM);
                this.columnDEDU_GIST_IMAGE_SYS = new global::System.Data.DataColumn("DEDU_GIST_IMAGE_SYS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_IMAGE_SYS);
                this.columnPREVENTIVE_MEASURE = new global::System.Data.DataColumn("PREVENTIVE_MEASURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPREVENTIVE_MEASURE);
                this.columnDEDU_GIST_PRE_MEA = new global::System.Data.DataColumn("DEDU_GIST_PRE_MEA", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_PRE_MEA);
                this.columnSERVICES_ITEMS = new global::System.Data.DataColumn("SERVICES_ITEMS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSERVICES_ITEMS);
                this.columnDEDU_GIST_SER_ITEMS = new global::System.Data.DataColumn("DEDU_GIST_SER_ITEMS", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_SER_ITEMS);
                this.columnEMERGENCY_EXAM = new global::System.Data.DataColumn("EMERGENCY_EXAM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEMERGENCY_EXAM);
                this.columnDEDU_GIST_EME_EXAM = new global::System.Data.DataColumn("DEDU_GIST_EME_EXAM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_EME_EXAM);
                this.columnDIAG_REPORT = new global::System.Data.DataColumn("DIAG_REPORT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDIAG_REPORT);
                this.columnDEDU_GIST_DIAG_RPT = new global::System.Data.DataColumn("DEDU_GIST_DIAG_RPT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_DIAG_RPT);
                this.columnMANAGEMENT = new global::System.Data.DataColumn("MANAGEMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMANAGEMENT);
                this.columnDEDU_GIST_MANAGEMENT = new global::System.Data.DataColumn("DEDU_GIST_MANAGEMENT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_MANAGEMENT);
                this.columnREGISTER_STAT = new global::System.Data.DataColumn("REGISTER_STAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnREGISTER_STAT);
                this.columnDEDU_GIST_REG_STAT = new global::System.Data.DataColumn("DEDU_GIST_REG_STAT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_REG_STAT);
                this.columnOVERSEE_RESULT = new global::System.Data.DataColumn("OVERSEE_RESULT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOVERSEE_RESULT);
                this.columnDEDU_GIST_OS_RES = new global::System.Data.DataColumn("DEDU_GIST_OS_RES", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDEDU_GIST_OS_RES);
                this.columnDEPT_MAN_KEY.Caption = "EXAM_ACCESSION_NUM";
                this.columnRY_LICENCE.Caption = "PATIENT_ID";
                this.columnDEDU_GIST_RY_LICENCE.Caption = "PATIENT_NAME";
                this.columnTITLES.Caption = "PATIENT_SEX";
                this.columnDEDU_GIST_TITLES.Caption = "STUDY_DATE_TIME";
                this.columnPOST_TRAIN.Caption = "STERNUM_BREAST";
                this.columnDEDU_GIST_POST_TRAIN.Caption = "STERNUM_BLADEBONE";
                this.columnCRITERION_INTEGRALITY.Caption = "STERNUM_BOARD";
                this.columnDEDU_GIST_CRI_INT.Caption = "STERNUM_IMAGE_DISTORTION";
                this.columnMANAGEMENT_SYSTEM.Caption = "STERNUM_ARRANGEMENT_FOCUS";
                this.columnDEDU_GIST_MAN_SYS.Caption = "STERNUM_FIRST_FORTH_WHETTLE";
                this.columnIMAGE_SYSTEM.Caption = "STERNUM_LETTER_NO";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPT_MAN_DICTRow NewDEPT_MAN_DICTRow() {
                return ((DEPT_MAN_DICTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DEPT_MAN_DICTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DEPT_MAN_DICTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DEPT_MAN_DICTRowChanged != null)) {
                    this.DEPT_MAN_DICTRowChanged(this, new DEPT_MAN_DICTRowChangeEvent(((DEPT_MAN_DICTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DEPT_MAN_DICTRowChanging != null)) {
                    this.DEPT_MAN_DICTRowChanging(this, new DEPT_MAN_DICTRowChangeEvent(((DEPT_MAN_DICTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DEPT_MAN_DICTRowDeleted != null)) {
                    this.DEPT_MAN_DICTRowDeleted(this, new DEPT_MAN_DICTRowChangeEvent(((DEPT_MAN_DICTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DEPT_MAN_DICTRowDeleting != null)) {
                    this.DEPT_MAN_DICTRowDeleting(this, new DEPT_MAN_DICTRowChangeEvent(((DEPT_MAN_DICTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDEPT_MAN_DICTRow(DEPT_MAN_DICTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CR_DataSet ds = new CR_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DEPT_MAN_DICTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RY_DIAG_DICTDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEXAM_ACCESSION_NUM;
            
            private global::System.Data.DataColumn columnPATIENT_LOCAL_ID;
            
            private global::System.Data.DataColumn columnQC_DATE;
            
            private global::System.Data.DataColumn columnPATIENT_ID;
            
            private global::System.Data.DataColumn columnPATIENT_NAME;
            
            private global::System.Data.DataColumn columnPATIENT_SEX;
            
            private global::System.Data.DataColumn columnSTUDY_DATE_TIME;
            
            private global::System.Data.DataColumn columnDRPT_NAME;
            
            private global::System.Data.DataColumn columnDRPT_SEX;
            
            private global::System.Data.DataColumn columnDRPT_AGE;
            
            private global::System.Data.DataColumn columnDRPT_NUMBER;
            
            private global::System.Data.DataColumn columnDRPT_LOCAL_ID;
            
            private global::System.Data.DataColumn columnDRPT_FILM_DATE;
            
            private global::System.Data.DataColumn columnDRPT_APP_DATE;
            
            private global::System.Data.DataColumn columnDRPT_CLIN_DIAG;
            
            private global::System.Data.DataColumn columnDRPT_EXAM_ITEM;
            
            private global::System.Data.DataColumn columnDRPT_EXAM_TEC;
            
            private global::System.Data.DataColumn columnDRPT_DESCRIPTION;
            
            private global::System.Data.DataColumn columnDRPT_IMPRESSION;
            
            private global::System.Data.DataColumn columnDRPT_TRANSCRIBER;
            
            private global::System.Data.DataColumn columnDRPT_APPROVER;
            
            private global::System.Data.DataColumn columnINQ_NAME;
            
            private global::System.Data.DataColumn columnINQ_SEX;
            
            private global::System.Data.DataColumn columnINQ_AGE;
            
            private global::System.Data.DataColumn columnINQ_NUMBER;
            
            private global::System.Data.DataColumn columnINQ_LOCAL_ID;
            
            private global::System.Data.DataColumn columnINQ_PATH_NO;
            
            private global::System.Data.DataColumn columnINQ_OPE_DATE;
            
            private global::System.Data.DataColumn columnINQ_EXAM_ITEM_DIAG;
            
            private global::System.Data.DataColumn columnINQ_OPERATION;
            
            private global::System.Data.DataColumn columnINQ_PATH_DESCRIPTION;
            
            private global::System.Data.DataColumn columnINQ_PATH_DOCTOR;
            
            private global::System.Data.DataColumn columnINQ_DOCTOR;
            
            private global::System.Data.DataColumn columnQUALITATIVE;
            
            private global::System.Data.DataColumn columnPITCH;
            
            private global::System.Data.DataColumn columnXR_POSITIVE_RATE;
            
            private global::System.Data.DataColumn columnCT_POSITIVE_RATE;
            
            private global::System.Data.DataColumn columnMR_POSITIVE_RATE;
            
            private global::System.Data.DataColumn columnTOTAL_SCORE;
            
            private global::System.Data.DataColumn columnDISTINCTION;
            
            private global::System.Data.DataColumn columnNUMBER_KEY;
            
            private global::System.Data.DataColumn columnDRPT_RPT_DATE;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RY_DIAG_DICTDataTable() {
                this.TableName = "RY_DIAG_DICT";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RY_DIAG_DICTDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected RY_DIAG_DICTDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EXAM_ACCESSION_NUMColumn {
                get {
                    return this.columnEXAM_ACCESSION_NUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_LOCAL_IDColumn {
                get {
                    return this.columnPATIENT_LOCAL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QC_DATEColumn {
                get {
                    return this.columnQC_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_IDColumn {
                get {
                    return this.columnPATIENT_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_NAMEColumn {
                get {
                    return this.columnPATIENT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PATIENT_SEXColumn {
                get {
                    return this.columnPATIENT_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn STUDY_DATE_TIMEColumn {
                get {
                    return this.columnSTUDY_DATE_TIME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_NAMEColumn {
                get {
                    return this.columnDRPT_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_SEXColumn {
                get {
                    return this.columnDRPT_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_AGEColumn {
                get {
                    return this.columnDRPT_AGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_NUMBERColumn {
                get {
                    return this.columnDRPT_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_LOCAL_IDColumn {
                get {
                    return this.columnDRPT_LOCAL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_FILM_DATEColumn {
                get {
                    return this.columnDRPT_FILM_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_APP_DATEColumn {
                get {
                    return this.columnDRPT_APP_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_CLIN_DIAGColumn {
                get {
                    return this.columnDRPT_CLIN_DIAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_EXAM_ITEMColumn {
                get {
                    return this.columnDRPT_EXAM_ITEM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_EXAM_TECColumn {
                get {
                    return this.columnDRPT_EXAM_TEC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_DESCRIPTIONColumn {
                get {
                    return this.columnDRPT_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_IMPRESSIONColumn {
                get {
                    return this.columnDRPT_IMPRESSION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_TRANSCRIBERColumn {
                get {
                    return this.columnDRPT_TRANSCRIBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_APPROVERColumn {
                get {
                    return this.columnDRPT_APPROVER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_NAMEColumn {
                get {
                    return this.columnINQ_NAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_SEXColumn {
                get {
                    return this.columnINQ_SEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_AGEColumn {
                get {
                    return this.columnINQ_AGE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_NUMBERColumn {
                get {
                    return this.columnINQ_NUMBER;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_LOCAL_IDColumn {
                get {
                    return this.columnINQ_LOCAL_ID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_PATH_NOColumn {
                get {
                    return this.columnINQ_PATH_NO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_OPE_DATEColumn {
                get {
                    return this.columnINQ_OPE_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_EXAM_ITEM_DIAGColumn {
                get {
                    return this.columnINQ_EXAM_ITEM_DIAG;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_OPERATIONColumn {
                get {
                    return this.columnINQ_OPERATION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_PATH_DESCRIPTIONColumn {
                get {
                    return this.columnINQ_PATH_DESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_PATH_DOCTORColumn {
                get {
                    return this.columnINQ_PATH_DOCTOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn INQ_DOCTORColumn {
                get {
                    return this.columnINQ_DOCTOR;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn QUALITATIVEColumn {
                get {
                    return this.columnQUALITATIVE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PITCHColumn {
                get {
                    return this.columnPITCH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn XR_POSITIVE_RATEColumn {
                get {
                    return this.columnXR_POSITIVE_RATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CT_POSITIVE_RATEColumn {
                get {
                    return this.columnCT_POSITIVE_RATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MR_POSITIVE_RATEColumn {
                get {
                    return this.columnMR_POSITIVE_RATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TOTAL_SCOREColumn {
                get {
                    return this.columnTOTAL_SCORE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DISTINCTIONColumn {
                get {
                    return this.columnDISTINCTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NUMBER_KEYColumn {
                get {
                    return this.columnNUMBER_KEY;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DRPT_RPT_DATEColumn {
                get {
                    return this.columnDRPT_RPT_DATE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RY_DIAG_DICTRow this[int index] {
                get {
                    return ((RY_DIAG_DICTRow)(this.Rows[index]));
                }
            }
            
            public event RY_DIAG_DICTRowChangeEventHandler RY_DIAG_DICTRowChanging;
            
            public event RY_DIAG_DICTRowChangeEventHandler RY_DIAG_DICTRowChanged;
            
            public event RY_DIAG_DICTRowChangeEventHandler RY_DIAG_DICTRowDeleting;
            
            public event RY_DIAG_DICTRowChangeEventHandler RY_DIAG_DICTRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRY_DIAG_DICTRow(RY_DIAG_DICTRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RY_DIAG_DICTRow AddRY_DIAG_DICTRow(
                        string EXAM_ACCESSION_NUM, 
                        string PATIENT_LOCAL_ID, 
                        string QC_DATE, 
                        string PATIENT_ID, 
                        string PATIENT_NAME, 
                        string PATIENT_SEX, 
                        string STUDY_DATE_TIME, 
                        string DRPT_NAME, 
                        string DRPT_SEX, 
                        string DRPT_AGE, 
                        string DRPT_NUMBER, 
                        string DRPT_LOCAL_ID, 
                        string DRPT_FILM_DATE, 
                        string DRPT_APP_DATE, 
                        string DRPT_CLIN_DIAG, 
                        string DRPT_EXAM_ITEM, 
                        string DRPT_EXAM_TEC, 
                        string DRPT_DESCRIPTION, 
                        string DRPT_IMPRESSION, 
                        string DRPT_TRANSCRIBER, 
                        string DRPT_APPROVER, 
                        string INQ_NAME, 
                        string INQ_SEX, 
                        string INQ_AGE, 
                        string INQ_NUMBER, 
                        string INQ_LOCAL_ID, 
                        string INQ_PATH_NO, 
                        string INQ_OPE_DATE, 
                        string INQ_EXAM_ITEM_DIAG, 
                        string INQ_OPERATION, 
                        string INQ_PATH_DESCRIPTION, 
                        string INQ_PATH_DOCTOR, 
                        string INQ_DOCTOR, 
                        string QUALITATIVE, 
                        string PITCH, 
                        string XR_POSITIVE_RATE, 
                        string CT_POSITIVE_RATE, 
                        string MR_POSITIVE_RATE, 
                        string TOTAL_SCORE, 
                        string DISTINCTION, 
                        string NUMBER_KEY, 
                        string DRPT_RPT_DATE) {
                RY_DIAG_DICTRow rowRY_DIAG_DICTRow = ((RY_DIAG_DICTRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EXAM_ACCESSION_NUM,
                        PATIENT_LOCAL_ID,
                        QC_DATE,
                        PATIENT_ID,
                        PATIENT_NAME,
                        PATIENT_SEX,
                        STUDY_DATE_TIME,
                        DRPT_NAME,
                        DRPT_SEX,
                        DRPT_AGE,
                        DRPT_NUMBER,
                        DRPT_LOCAL_ID,
                        DRPT_FILM_DATE,
                        DRPT_APP_DATE,
                        DRPT_CLIN_DIAG,
                        DRPT_EXAM_ITEM,
                        DRPT_EXAM_TEC,
                        DRPT_DESCRIPTION,
                        DRPT_IMPRESSION,
                        DRPT_TRANSCRIBER,
                        DRPT_APPROVER,
                        INQ_NAME,
                        INQ_SEX,
                        INQ_AGE,
                        INQ_NUMBER,
                        INQ_LOCAL_ID,
                        INQ_PATH_NO,
                        INQ_OPE_DATE,
                        INQ_EXAM_ITEM_DIAG,
                        INQ_OPERATION,
                        INQ_PATH_DESCRIPTION,
                        INQ_PATH_DOCTOR,
                        INQ_DOCTOR,
                        QUALITATIVE,
                        PITCH,
                        XR_POSITIVE_RATE,
                        CT_POSITIVE_RATE,
                        MR_POSITIVE_RATE,
                        TOTAL_SCORE,
                        DISTINCTION,
                        NUMBER_KEY,
                        DRPT_RPT_DATE};
                rowRY_DIAG_DICTRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRY_DIAG_DICTRow);
                return rowRY_DIAG_DICTRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RY_DIAG_DICTDataTable cln = ((RY_DIAG_DICTDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RY_DIAG_DICTDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEXAM_ACCESSION_NUM = base.Columns["EXAM_ACCESSION_NUM"];
                this.columnPATIENT_LOCAL_ID = base.Columns["PATIENT_LOCAL_ID"];
                this.columnQC_DATE = base.Columns["QC_DATE"];
                this.columnPATIENT_ID = base.Columns["PATIENT_ID"];
                this.columnPATIENT_NAME = base.Columns["PATIENT_NAME"];
                this.columnPATIENT_SEX = base.Columns["PATIENT_SEX"];
                this.columnSTUDY_DATE_TIME = base.Columns["STUDY_DATE_TIME"];
                this.columnDRPT_NAME = base.Columns["DRPT_NAME"];
                this.columnDRPT_SEX = base.Columns["DRPT_SEX"];
                this.columnDRPT_AGE = base.Columns["DRPT_AGE"];
                this.columnDRPT_NUMBER = base.Columns["DRPT_NUMBER"];
                this.columnDRPT_LOCAL_ID = base.Columns["DRPT_LOCAL_ID"];
                this.columnDRPT_FILM_DATE = base.Columns["DRPT_FILM_DATE"];
                this.columnDRPT_APP_DATE = base.Columns["DRPT_APP_DATE"];
                this.columnDRPT_CLIN_DIAG = base.Columns["DRPT_CLIN_DIAG"];
                this.columnDRPT_EXAM_ITEM = base.Columns["DRPT_EXAM_ITEM"];
                this.columnDRPT_EXAM_TEC = base.Columns["DRPT_EXAM_TEC"];
                this.columnDRPT_DESCRIPTION = base.Columns["DRPT_DESCRIPTION"];
                this.columnDRPT_IMPRESSION = base.Columns["DRPT_IMPRESSION"];
                this.columnDRPT_TRANSCRIBER = base.Columns["DRPT_TRANSCRIBER"];
                this.columnDRPT_APPROVER = base.Columns["DRPT_APPROVER"];
                this.columnINQ_NAME = base.Columns["INQ_NAME"];
                this.columnINQ_SEX = base.Columns["INQ_SEX"];
                this.columnINQ_AGE = base.Columns["INQ_AGE"];
                this.columnINQ_NUMBER = base.Columns["INQ_NUMBER"];
                this.columnINQ_LOCAL_ID = base.Columns["INQ_LOCAL_ID"];
                this.columnINQ_PATH_NO = base.Columns["INQ_PATH_NO"];
                this.columnINQ_OPE_DATE = base.Columns["INQ_OPE_DATE"];
                this.columnINQ_EXAM_ITEM_DIAG = base.Columns["INQ_EXAM_ITEM_DIAG"];
                this.columnINQ_OPERATION = base.Columns["INQ_OPERATION"];
                this.columnINQ_PATH_DESCRIPTION = base.Columns["INQ_PATH_DESCRIPTION"];
                this.columnINQ_PATH_DOCTOR = base.Columns["INQ_PATH_DOCTOR"];
                this.columnINQ_DOCTOR = base.Columns["INQ_DOCTOR"];
                this.columnQUALITATIVE = base.Columns["QUALITATIVE"];
                this.columnPITCH = base.Columns["PITCH"];
                this.columnXR_POSITIVE_RATE = base.Columns["XR_POSITIVE_RATE"];
                this.columnCT_POSITIVE_RATE = base.Columns["CT_POSITIVE_RATE"];
                this.columnMR_POSITIVE_RATE = base.Columns["MR_POSITIVE_RATE"];
                this.columnTOTAL_SCORE = base.Columns["TOTAL_SCORE"];
                this.columnDISTINCTION = base.Columns["DISTINCTION"];
                this.columnNUMBER_KEY = base.Columns["NUMBER_KEY"];
                this.columnDRPT_RPT_DATE = base.Columns["DRPT_RPT_DATE"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEXAM_ACCESSION_NUM = new global::System.Data.DataColumn("EXAM_ACCESSION_NUM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEXAM_ACCESSION_NUM);
                this.columnPATIENT_LOCAL_ID = new global::System.Data.DataColumn("PATIENT_LOCAL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_LOCAL_ID);
                this.columnQC_DATE = new global::System.Data.DataColumn("QC_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQC_DATE);
                this.columnPATIENT_ID = new global::System.Data.DataColumn("PATIENT_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_ID);
                this.columnPATIENT_NAME = new global::System.Data.DataColumn("PATIENT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_NAME);
                this.columnPATIENT_SEX = new global::System.Data.DataColumn("PATIENT_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPATIENT_SEX);
                this.columnSTUDY_DATE_TIME = new global::System.Data.DataColumn("STUDY_DATE_TIME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSTUDY_DATE_TIME);
                this.columnDRPT_NAME = new global::System.Data.DataColumn("DRPT_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_NAME);
                this.columnDRPT_SEX = new global::System.Data.DataColumn("DRPT_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_SEX);
                this.columnDRPT_AGE = new global::System.Data.DataColumn("DRPT_AGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_AGE);
                this.columnDRPT_NUMBER = new global::System.Data.DataColumn("DRPT_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_NUMBER);
                this.columnDRPT_LOCAL_ID = new global::System.Data.DataColumn("DRPT_LOCAL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_LOCAL_ID);
                this.columnDRPT_FILM_DATE = new global::System.Data.DataColumn("DRPT_FILM_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_FILM_DATE);
                this.columnDRPT_APP_DATE = new global::System.Data.DataColumn("DRPT_APP_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_APP_DATE);
                this.columnDRPT_CLIN_DIAG = new global::System.Data.DataColumn("DRPT_CLIN_DIAG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_CLIN_DIAG);
                this.columnDRPT_EXAM_ITEM = new global::System.Data.DataColumn("DRPT_EXAM_ITEM", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_EXAM_ITEM);
                this.columnDRPT_EXAM_TEC = new global::System.Data.DataColumn("DRPT_EXAM_TEC", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_EXAM_TEC);
                this.columnDRPT_DESCRIPTION = new global::System.Data.DataColumn("DRPT_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_DESCRIPTION);
                this.columnDRPT_IMPRESSION = new global::System.Data.DataColumn("DRPT_IMPRESSION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_IMPRESSION);
                this.columnDRPT_TRANSCRIBER = new global::System.Data.DataColumn("DRPT_TRANSCRIBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_TRANSCRIBER);
                this.columnDRPT_APPROVER = new global::System.Data.DataColumn("DRPT_APPROVER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_APPROVER);
                this.columnINQ_NAME = new global::System.Data.DataColumn("INQ_NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_NAME);
                this.columnINQ_SEX = new global::System.Data.DataColumn("INQ_SEX", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_SEX);
                this.columnINQ_AGE = new global::System.Data.DataColumn("INQ_AGE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_AGE);
                this.columnINQ_NUMBER = new global::System.Data.DataColumn("INQ_NUMBER", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_NUMBER);
                this.columnINQ_LOCAL_ID = new global::System.Data.DataColumn("INQ_LOCAL_ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_LOCAL_ID);
                this.columnINQ_PATH_NO = new global::System.Data.DataColumn("INQ_PATH_NO", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_PATH_NO);
                this.columnINQ_OPE_DATE = new global::System.Data.DataColumn("INQ_OPE_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_OPE_DATE);
                this.columnINQ_EXAM_ITEM_DIAG = new global::System.Data.DataColumn("INQ_EXAM_ITEM_DIAG", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_EXAM_ITEM_DIAG);
                this.columnINQ_OPERATION = new global::System.Data.DataColumn("INQ_OPERATION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_OPERATION);
                this.columnINQ_PATH_DESCRIPTION = new global::System.Data.DataColumn("INQ_PATH_DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_PATH_DESCRIPTION);
                this.columnINQ_PATH_DOCTOR = new global::System.Data.DataColumn("INQ_PATH_DOCTOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_PATH_DOCTOR);
                this.columnINQ_DOCTOR = new global::System.Data.DataColumn("INQ_DOCTOR", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnINQ_DOCTOR);
                this.columnQUALITATIVE = new global::System.Data.DataColumn("QUALITATIVE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnQUALITATIVE);
                this.columnPITCH = new global::System.Data.DataColumn("PITCH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPITCH);
                this.columnXR_POSITIVE_RATE = new global::System.Data.DataColumn("XR_POSITIVE_RATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnXR_POSITIVE_RATE);
                this.columnCT_POSITIVE_RATE = new global::System.Data.DataColumn("CT_POSITIVE_RATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCT_POSITIVE_RATE);
                this.columnMR_POSITIVE_RATE = new global::System.Data.DataColumn("MR_POSITIVE_RATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMR_POSITIVE_RATE);
                this.columnTOTAL_SCORE = new global::System.Data.DataColumn("TOTAL_SCORE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTOTAL_SCORE);
                this.columnDISTINCTION = new global::System.Data.DataColumn("DISTINCTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDISTINCTION);
                this.columnNUMBER_KEY = new global::System.Data.DataColumn("NUMBER_KEY", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNUMBER_KEY);
                this.columnDRPT_RPT_DATE = new global::System.Data.DataColumn("DRPT_RPT_DATE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDRPT_RPT_DATE);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RY_DIAG_DICTRow NewRY_DIAG_DICTRow() {
                return ((RY_DIAG_DICTRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RY_DIAG_DICTRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RY_DIAG_DICTRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RY_DIAG_DICTRowChanged != null)) {
                    this.RY_DIAG_DICTRowChanged(this, new RY_DIAG_DICTRowChangeEvent(((RY_DIAG_DICTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RY_DIAG_DICTRowChanging != null)) {
                    this.RY_DIAG_DICTRowChanging(this, new RY_DIAG_DICTRowChangeEvent(((RY_DIAG_DICTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RY_DIAG_DICTRowDeleted != null)) {
                    this.RY_DIAG_DICTRowDeleted(this, new RY_DIAG_DICTRowChangeEvent(((RY_DIAG_DICTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RY_DIAG_DICTRowDeleting != null)) {
                    this.RY_DIAG_DICTRowDeleting(this, new RY_DIAG_DICTRowChangeEvent(((RY_DIAG_DICTRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRY_DIAG_DICTRow(RY_DIAG_DICTRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                CR_DataSet ds = new CR_DataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RY_DIAG_DICTDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SternumRow : global::System.Data.DataRow {
            
            private SternumDataTable tableSternum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SternumRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSternum = ((SternumDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_ACCESSION_NUM {
                get {
                    try {
                        return ((string)(this[this.tableSternum.EXAM_ACCESSION_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“EXAM_ACCESSION_NUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.EXAM_ACCESSION_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_LOCAL_ID {
                get {
                    try {
                        return ((string)(this[this.tableSternum.PATIENT_LOCAL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“PATIENT_LOCAL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.PATIENT_LOCAL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QC_DATE {
                get {
                    try {
                        return ((string)(this[this.tableSternum.QC_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“QC_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.QC_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_ID {
                get {
                    try {
                        return ((string)(this[this.tableSternum.PATIENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“PATIENT_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableSternum.PATIENT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“PATIENT_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.PATIENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_SEX {
                get {
                    try {
                        return ((string)(this[this.tableSternum.PATIENT_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“PATIENT_SEX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.PATIENT_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STUDY_DATE_TIME {
                get {
                    try {
                        return ((string)(this[this.tableSternum.STUDY_DATE_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“STUDY_DATE_TIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.STUDY_DATE_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STERNUM_BREAST {
                get {
                    try {
                        return ((string)(this[this.tableSternum.STERNUM_BREASTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“STERNUM_BREAST”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.STERNUM_BREASTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STERNUM_BLADEBONE {
                get {
                    try {
                        return ((string)(this[this.tableSternum.STERNUM_BLADEBONEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“STERNUM_BLADEBONE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.STERNUM_BLADEBONEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STERNUM_BOARD {
                get {
                    try {
                        return ((string)(this[this.tableSternum.STERNUM_BOARDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“STERNUM_BOARD”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.STERNUM_BOARDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STERNUM_IMAGE_DISTORTION {
                get {
                    try {
                        return ((string)(this[this.tableSternum.STERNUM_IMAGE_DISTORTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“STERNUM_IMAGE_DISTORTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.STERNUM_IMAGE_DISTORTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STERNUM_ARRANGEMENT_FOCUS {
                get {
                    try {
                        return ((string)(this[this.tableSternum.STERNUM_ARRANGEMENT_FOCUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“STERNUM_ARRANGEMENT_FOCUS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.STERNUM_ARRANGEMENT_FOCUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STERNUM_FIRST_FORTH_WHETTLE {
                get {
                    try {
                        return ((string)(this[this.tableSternum.STERNUM_FIRST_FORTH_WHETTLEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“STERNUM_FIRST_FORTH_WHETTLE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.STERNUM_FIRST_FORTH_WHETTLEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STERNUM_LETTER_NO {
                get {
                    try {
                        return ((string)(this[this.tableSternum.STERNUM_LETTER_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“STERNUM_LETTER_NO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.STERNUM_LETTER_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STERNUM_LETTER_ARRANGE {
                get {
                    try {
                        return ((string)(this[this.tableSternum.STERNUM_LETTER_ARRANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“STERNUM_LETTER_ARRANGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.STERNUM_LETTER_ARRANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BASE_ASH_FOG_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableSternum.BASE_ASH_FOG_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“BASE_ASH_FOG_VALUE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.BASE_ASH_FOG_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIAGNOSE_AREA_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableSternum.DIAGNOSE_AREA_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“DIAGNOSE_AREA_VALUE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.DIAGNOSE_AREA_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLANK_EXPOSAL_DENSITY {
                get {
                    try {
                        return ((string)(this[this.tableSternum.BLANK_EXPOSAL_DENSITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“BLANK_EXPOSAL_DENSITY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.BLANK_EXPOSAL_DENSITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIRT {
                get {
                    try {
                        return ((string)(this[this.tableSternum.DIRTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“DIRT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.DIRTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NICK {
                get {
                    try {
                        return ((string)(this[this.tableSternum.NICKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“NICK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.NICKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADHIBIT {
                get {
                    try {
                        return ((string)(this[this.tableSternum.ADHIBITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“ADHIBIT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.ADHIBITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WATER_MARK {
                get {
                    try {
                        return ((string)(this[this.tableSternum.WATER_MARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“WATER_MARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.WATER_MARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FINGER_MARK {
                get {
                    try {
                        return ((string)(this[this.tableSternum.FINGER_MARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“FINGER_MARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.FINGER_MARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LIGHT_LEAK {
                get {
                    try {
                        return ((string)(this[this.tableSternum.LIGHT_LEAKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“LIGHT_LEAK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.LIGHT_LEAKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATIC_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableSternum.STATIC_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“STATIC_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.STATIC_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXTERNA_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableSternum.EXTERNA_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“EXTERNA_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.EXTERNA_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_SCORE {
                get {
                    try {
                        return ((string)(this[this.tableSternum.TOTAL_SCOREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“TOTAL_SCORE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.TOTAL_SCOREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISTINCTION {
                get {
                    try {
                        return ((string)(this[this.tableSternum.DISTINCTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“DISTINCTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.DISTINCTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER_KEY {
                get {
                    try {
                        return ((string)(this[this.tableSternum.NUMBER_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“NUMBER_KEY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.NUMBER_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_STERNUM_ARRANGEMENT_FOCUS {
                get {
                    try {
                        return ((string)(this[this.tableSternum.D_STERNUM_ARRANGEMENT_FOCUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“D_STERNUM_ARRANGEMENT_FOCUS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.D_STERNUM_ARRANGEMENT_FOCUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_STERNUM_LUNG_MARKINGS {
                get {
                    try {
                        return ((string)(this[this.tableSternum.D_STERNUM_LUNG_MARKINGSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“D_STERNUM_LUNG_MARKINGS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.D_STERNUM_LUNG_MARKINGSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_EXPOSURE_DOSE {
                get {
                    try {
                        return ((string)(this[this.tableSternum.D_EXPOSURE_DOSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“D_EXPOSURE_DOSE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.D_EXPOSURE_DOSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_FLAG_CONTENT {
                get {
                    try {
                        return ((string)(this[this.tableSternum.D_FLAG_CONTENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“D_FLAG_CONTENT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.D_FLAG_CONTENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_FLAG_PLACE_ARRANGE {
                get {
                    try {
                        return ((string)(this[this.tableSternum.D_FLAG_PLACE_ARRANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“D_FLAG_PLACE_ARRANGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.D_FLAG_PLACE_ARRANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_DEVICE_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableSternum.D_DEVICE_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Sternum”中列“D_DEVICE_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSternum.D_DEVICE_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_ACCESSION_NUMNull() {
                return this.IsNull(this.tableSternum.EXAM_ACCESSION_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_ACCESSION_NUMNull() {
                this[this.tableSternum.EXAM_ACCESSION_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_LOCAL_IDNull() {
                return this.IsNull(this.tableSternum.PATIENT_LOCAL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_LOCAL_IDNull() {
                this[this.tableSternum.PATIENT_LOCAL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQC_DATENull() {
                return this.IsNull(this.tableSternum.QC_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQC_DATENull() {
                this[this.tableSternum.QC_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_IDNull() {
                return this.IsNull(this.tableSternum.PATIENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_IDNull() {
                this[this.tableSternum.PATIENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_NAMENull() {
                return this.IsNull(this.tableSternum.PATIENT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_NAMENull() {
                this[this.tableSternum.PATIENT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_SEXNull() {
                return this.IsNull(this.tableSternum.PATIENT_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_SEXNull() {
                this[this.tableSternum.PATIENT_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTUDY_DATE_TIMENull() {
                return this.IsNull(this.tableSternum.STUDY_DATE_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTUDY_DATE_TIMENull() {
                this[this.tableSternum.STUDY_DATE_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTERNUM_BREASTNull() {
                return this.IsNull(this.tableSternum.STERNUM_BREASTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTERNUM_BREASTNull() {
                this[this.tableSternum.STERNUM_BREASTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTERNUM_BLADEBONENull() {
                return this.IsNull(this.tableSternum.STERNUM_BLADEBONEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTERNUM_BLADEBONENull() {
                this[this.tableSternum.STERNUM_BLADEBONEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTERNUM_BOARDNull() {
                return this.IsNull(this.tableSternum.STERNUM_BOARDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTERNUM_BOARDNull() {
                this[this.tableSternum.STERNUM_BOARDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTERNUM_IMAGE_DISTORTIONNull() {
                return this.IsNull(this.tableSternum.STERNUM_IMAGE_DISTORTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTERNUM_IMAGE_DISTORTIONNull() {
                this[this.tableSternum.STERNUM_IMAGE_DISTORTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTERNUM_ARRANGEMENT_FOCUSNull() {
                return this.IsNull(this.tableSternum.STERNUM_ARRANGEMENT_FOCUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTERNUM_ARRANGEMENT_FOCUSNull() {
                this[this.tableSternum.STERNUM_ARRANGEMENT_FOCUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTERNUM_FIRST_FORTH_WHETTLENull() {
                return this.IsNull(this.tableSternum.STERNUM_FIRST_FORTH_WHETTLEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTERNUM_FIRST_FORTH_WHETTLENull() {
                this[this.tableSternum.STERNUM_FIRST_FORTH_WHETTLEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTERNUM_LETTER_NONull() {
                return this.IsNull(this.tableSternum.STERNUM_LETTER_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTERNUM_LETTER_NONull() {
                this[this.tableSternum.STERNUM_LETTER_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTERNUM_LETTER_ARRANGENull() {
                return this.IsNull(this.tableSternum.STERNUM_LETTER_ARRANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTERNUM_LETTER_ARRANGENull() {
                this[this.tableSternum.STERNUM_LETTER_ARRANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBASE_ASH_FOG_VALUENull() {
                return this.IsNull(this.tableSternum.BASE_ASH_FOG_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBASE_ASH_FOG_VALUENull() {
                this[this.tableSternum.BASE_ASH_FOG_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIAGNOSE_AREA_VALUENull() {
                return this.IsNull(this.tableSternum.DIAGNOSE_AREA_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIAGNOSE_AREA_VALUENull() {
                this[this.tableSternum.DIAGNOSE_AREA_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLANK_EXPOSAL_DENSITYNull() {
                return this.IsNull(this.tableSternum.BLANK_EXPOSAL_DENSITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLANK_EXPOSAL_DENSITYNull() {
                this[this.tableSternum.BLANK_EXPOSAL_DENSITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIRTNull() {
                return this.IsNull(this.tableSternum.DIRTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIRTNull() {
                this[this.tableSternum.DIRTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNICKNull() {
                return this.IsNull(this.tableSternum.NICKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNICKNull() {
                this[this.tableSternum.NICKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADHIBITNull() {
                return this.IsNull(this.tableSternum.ADHIBITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADHIBITNull() {
                this[this.tableSternum.ADHIBITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWATER_MARKNull() {
                return this.IsNull(this.tableSternum.WATER_MARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWATER_MARKNull() {
                this[this.tableSternum.WATER_MARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINGER_MARKNull() {
                return this.IsNull(this.tableSternum.FINGER_MARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINGER_MARKNull() {
                this[this.tableSternum.FINGER_MARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIGHT_LEAKNull() {
                return this.IsNull(this.tableSternum.LIGHT_LEAKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIGHT_LEAKNull() {
                this[this.tableSternum.LIGHT_LEAKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATIC_SHADOWNull() {
                return this.IsNull(this.tableSternum.STATIC_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATIC_SHADOWNull() {
                this[this.tableSternum.STATIC_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXTERNA_SHADOWNull() {
                return this.IsNull(this.tableSternum.EXTERNA_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXTERNA_SHADOWNull() {
                this[this.tableSternum.EXTERNA_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_SCORENull() {
                return this.IsNull(this.tableSternum.TOTAL_SCOREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_SCORENull() {
                this[this.tableSternum.TOTAL_SCOREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISTINCTIONNull() {
                return this.IsNull(this.tableSternum.DISTINCTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISTINCTIONNull() {
                this[this.tableSternum.DISTINCTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBER_KEYNull() {
                return this.IsNull(this.tableSternum.NUMBER_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBER_KEYNull() {
                this[this.tableSternum.NUMBER_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_STERNUM_ARRANGEMENT_FOCUSNull() {
                return this.IsNull(this.tableSternum.D_STERNUM_ARRANGEMENT_FOCUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_STERNUM_ARRANGEMENT_FOCUSNull() {
                this[this.tableSternum.D_STERNUM_ARRANGEMENT_FOCUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_STERNUM_LUNG_MARKINGSNull() {
                return this.IsNull(this.tableSternum.D_STERNUM_LUNG_MARKINGSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_STERNUM_LUNG_MARKINGSNull() {
                this[this.tableSternum.D_STERNUM_LUNG_MARKINGSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_EXPOSURE_DOSENull() {
                return this.IsNull(this.tableSternum.D_EXPOSURE_DOSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_EXPOSURE_DOSENull() {
                this[this.tableSternum.D_EXPOSURE_DOSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_FLAG_CONTENTNull() {
                return this.IsNull(this.tableSternum.D_FLAG_CONTENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_FLAG_CONTENTNull() {
                this[this.tableSternum.D_FLAG_CONTENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_FLAG_PLACE_ARRANGENull() {
                return this.IsNull(this.tableSternum.D_FLAG_PLACE_ARRANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_FLAG_PLACE_ARRANGENull() {
                this[this.tableSternum.D_FLAG_PLACE_ARRANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_DEVICE_SHADOWNull() {
                return this.IsNull(this.tableSternum.D_DEVICE_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_DEVICE_SHADOWNull() {
                this[this.tableSternum.D_DEVICE_SHADOWColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class KnuckleRow : global::System.Data.DataRow {
            
            private KnuckleDataTable tableKnuckle;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal KnuckleRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableKnuckle = ((KnuckleDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_ACCESSION_NUM {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.EXAM_ACCESSION_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“EXAM_ACCESSION_NUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.EXAM_ACCESSION_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_LOCAL_ID {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.PATIENT_LOCAL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“PATIENT_LOCAL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.PATIENT_LOCAL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QC_DATE {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.QC_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“QC_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.QC_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_ID {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.PATIENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“PATIENT_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.PATIENT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“PATIENT_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.PATIENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_SEX {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.PATIENT_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“PATIENT_SEX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.PATIENT_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STUDY_DATE_TIME {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.STUDY_DATE_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“STUDY_DATE_TIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.STUDY_DATE_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KNUCKLE_PROJECTION {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.KNUCKLE_PROJECTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“KNUCKLE_PROJECTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.KNUCKLE_PROJECTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KNUCKLE_LONG_AXIS_PARALLEL {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.KNUCKLE_LONG_AXIS_PARALLELColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“KNUCKLE_LONG_AXIS_PARALLEL”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.KNUCKLE_LONG_AXIS_PARALLELColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KNUCKLE_WRAP {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.KNUCKLE_WRAPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“KNUCKLE_WRAP”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.KNUCKLE_WRAPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KNUCKLE_IMAGE_DISTORTION {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.KNUCKLE_IMAGE_DISTORTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“KNUCKLE_IMAGE_DISTORTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.KNUCKLE_IMAGE_DISTORTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KNUCKLE_RESOLUTION {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.KNUCKLE_RESOLUTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“KNUCKLE_RESOLUTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.KNUCKLE_RESOLUTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KNUCKLE_ARRANGEMENT_FOCUS {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.KNUCKLE_ARRANGEMENT_FOCUSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“KNUCKLE_ARRANGEMENT_FOCUS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.KNUCKLE_ARRANGEMENT_FOCUSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string KNUCKLE_LETTER_ARRANGE {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.KNUCKLE_LETTER_ARRANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“KNUCKLE_LETTER_ARRANGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.KNUCKLE_LETTER_ARRANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BASE_ASH_FOG_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.BASE_ASH_FOG_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“BASE_ASH_FOG_VALUE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.BASE_ASH_FOG_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIAGNOSE_AREA_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.DIAGNOSE_AREA_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“DIAGNOSE_AREA_VALUE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.DIAGNOSE_AREA_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLANK_EXPOSAL_DENSITY {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.BLANK_EXPOSAL_DENSITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“BLANK_EXPOSAL_DENSITY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.BLANK_EXPOSAL_DENSITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIRT {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.DIRTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“DIRT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.DIRTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NICK {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.NICKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“NICK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.NICKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADHIBIT {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.ADHIBITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“ADHIBIT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.ADHIBITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WATER_MARK {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.WATER_MARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“WATER_MARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.WATER_MARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FINGER_MARK {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.FINGER_MARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“FINGER_MARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.FINGER_MARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LIGHT_LEAK {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.LIGHT_LEAKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“LIGHT_LEAK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.LIGHT_LEAKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATIC_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.STATIC_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“STATIC_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.STATIC_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXTERNA_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.EXTERNA_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“EXTERNA_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.EXTERNA_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_SCORE {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.TOTAL_SCOREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“TOTAL_SCORE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.TOTAL_SCOREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISTINCTION {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.DISTINCTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“DISTINCTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.DISTINCTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER_KEY {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.NUMBER_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“NUMBER_KEY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.NUMBER_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_EXPOSURE_DOSE {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.D_EXPOSURE_DOSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“D_EXPOSURE_DOSE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.D_EXPOSURE_DOSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_FLAG_CONTENT {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.D_FLAG_CONTENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“D_FLAG_CONTENT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.D_FLAG_CONTENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_FLAG_PLACE_ARRANGE {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.D_FLAG_PLACE_ARRANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“D_FLAG_PLACE_ARRANGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.D_FLAG_PLACE_ARRANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_DEVICE_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableKnuckle.D_DEVICE_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“Knuckle”中列“D_DEVICE_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableKnuckle.D_DEVICE_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_ACCESSION_NUMNull() {
                return this.IsNull(this.tableKnuckle.EXAM_ACCESSION_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_ACCESSION_NUMNull() {
                this[this.tableKnuckle.EXAM_ACCESSION_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_LOCAL_IDNull() {
                return this.IsNull(this.tableKnuckle.PATIENT_LOCAL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_LOCAL_IDNull() {
                this[this.tableKnuckle.PATIENT_LOCAL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQC_DATENull() {
                return this.IsNull(this.tableKnuckle.QC_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQC_DATENull() {
                this[this.tableKnuckle.QC_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_IDNull() {
                return this.IsNull(this.tableKnuckle.PATIENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_IDNull() {
                this[this.tableKnuckle.PATIENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_NAMENull() {
                return this.IsNull(this.tableKnuckle.PATIENT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_NAMENull() {
                this[this.tableKnuckle.PATIENT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_SEXNull() {
                return this.IsNull(this.tableKnuckle.PATIENT_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_SEXNull() {
                this[this.tableKnuckle.PATIENT_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTUDY_DATE_TIMENull() {
                return this.IsNull(this.tableKnuckle.STUDY_DATE_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTUDY_DATE_TIMENull() {
                this[this.tableKnuckle.STUDY_DATE_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKNUCKLE_PROJECTIONNull() {
                return this.IsNull(this.tableKnuckle.KNUCKLE_PROJECTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKNUCKLE_PROJECTIONNull() {
                this[this.tableKnuckle.KNUCKLE_PROJECTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKNUCKLE_LONG_AXIS_PARALLELNull() {
                return this.IsNull(this.tableKnuckle.KNUCKLE_LONG_AXIS_PARALLELColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKNUCKLE_LONG_AXIS_PARALLELNull() {
                this[this.tableKnuckle.KNUCKLE_LONG_AXIS_PARALLELColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKNUCKLE_WRAPNull() {
                return this.IsNull(this.tableKnuckle.KNUCKLE_WRAPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKNUCKLE_WRAPNull() {
                this[this.tableKnuckle.KNUCKLE_WRAPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKNUCKLE_IMAGE_DISTORTIONNull() {
                return this.IsNull(this.tableKnuckle.KNUCKLE_IMAGE_DISTORTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKNUCKLE_IMAGE_DISTORTIONNull() {
                this[this.tableKnuckle.KNUCKLE_IMAGE_DISTORTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKNUCKLE_RESOLUTIONNull() {
                return this.IsNull(this.tableKnuckle.KNUCKLE_RESOLUTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKNUCKLE_RESOLUTIONNull() {
                this[this.tableKnuckle.KNUCKLE_RESOLUTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKNUCKLE_ARRANGEMENT_FOCUSNull() {
                return this.IsNull(this.tableKnuckle.KNUCKLE_ARRANGEMENT_FOCUSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKNUCKLE_ARRANGEMENT_FOCUSNull() {
                this[this.tableKnuckle.KNUCKLE_ARRANGEMENT_FOCUSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsKNUCKLE_LETTER_ARRANGENull() {
                return this.IsNull(this.tableKnuckle.KNUCKLE_LETTER_ARRANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetKNUCKLE_LETTER_ARRANGENull() {
                this[this.tableKnuckle.KNUCKLE_LETTER_ARRANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBASE_ASH_FOG_VALUENull() {
                return this.IsNull(this.tableKnuckle.BASE_ASH_FOG_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBASE_ASH_FOG_VALUENull() {
                this[this.tableKnuckle.BASE_ASH_FOG_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIAGNOSE_AREA_VALUENull() {
                return this.IsNull(this.tableKnuckle.DIAGNOSE_AREA_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIAGNOSE_AREA_VALUENull() {
                this[this.tableKnuckle.DIAGNOSE_AREA_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLANK_EXPOSAL_DENSITYNull() {
                return this.IsNull(this.tableKnuckle.BLANK_EXPOSAL_DENSITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLANK_EXPOSAL_DENSITYNull() {
                this[this.tableKnuckle.BLANK_EXPOSAL_DENSITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIRTNull() {
                return this.IsNull(this.tableKnuckle.DIRTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIRTNull() {
                this[this.tableKnuckle.DIRTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNICKNull() {
                return this.IsNull(this.tableKnuckle.NICKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNICKNull() {
                this[this.tableKnuckle.NICKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADHIBITNull() {
                return this.IsNull(this.tableKnuckle.ADHIBITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADHIBITNull() {
                this[this.tableKnuckle.ADHIBITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWATER_MARKNull() {
                return this.IsNull(this.tableKnuckle.WATER_MARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWATER_MARKNull() {
                this[this.tableKnuckle.WATER_MARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINGER_MARKNull() {
                return this.IsNull(this.tableKnuckle.FINGER_MARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINGER_MARKNull() {
                this[this.tableKnuckle.FINGER_MARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIGHT_LEAKNull() {
                return this.IsNull(this.tableKnuckle.LIGHT_LEAKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIGHT_LEAKNull() {
                this[this.tableKnuckle.LIGHT_LEAKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATIC_SHADOWNull() {
                return this.IsNull(this.tableKnuckle.STATIC_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATIC_SHADOWNull() {
                this[this.tableKnuckle.STATIC_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXTERNA_SHADOWNull() {
                return this.IsNull(this.tableKnuckle.EXTERNA_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXTERNA_SHADOWNull() {
                this[this.tableKnuckle.EXTERNA_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_SCORENull() {
                return this.IsNull(this.tableKnuckle.TOTAL_SCOREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_SCORENull() {
                this[this.tableKnuckle.TOTAL_SCOREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISTINCTIONNull() {
                return this.IsNull(this.tableKnuckle.DISTINCTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISTINCTIONNull() {
                this[this.tableKnuckle.DISTINCTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBER_KEYNull() {
                return this.IsNull(this.tableKnuckle.NUMBER_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBER_KEYNull() {
                this[this.tableKnuckle.NUMBER_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_EXPOSURE_DOSENull() {
                return this.IsNull(this.tableKnuckle.D_EXPOSURE_DOSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_EXPOSURE_DOSENull() {
                this[this.tableKnuckle.D_EXPOSURE_DOSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_FLAG_CONTENTNull() {
                return this.IsNull(this.tableKnuckle.D_FLAG_CONTENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_FLAG_CONTENTNull() {
                this[this.tableKnuckle.D_FLAG_CONTENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_FLAG_PLACE_ARRANGENull() {
                return this.IsNull(this.tableKnuckle.D_FLAG_PLACE_ARRANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_FLAG_PLACE_ARRANGENull() {
                this[this.tableKnuckle.D_FLAG_PLACE_ARRANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_DEVICE_SHADOWNull() {
                return this.IsNull(this.tableKnuckle.D_DEVICE_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_DEVICE_SHADOWNull() {
                this[this.tableKnuckle.D_DEVICE_SHADOWColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class IVPRow : global::System.Data.DataRow {
            
            private IVPDataTable tableIVP;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal IVPRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableIVP = ((IVPDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_ACCESSION_NUM {
                get {
                    try {
                        return ((string)(this[this.tableIVP.EXAM_ACCESSION_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“EXAM_ACCESSION_NUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.EXAM_ACCESSION_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_LOCAL_ID {
                get {
                    try {
                        return ((string)(this[this.tableIVP.PATIENT_LOCAL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“PATIENT_LOCAL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.PATIENT_LOCAL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QC_DATE {
                get {
                    try {
                        return ((string)(this[this.tableIVP.QC_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“QC_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.QC_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_ID {
                get {
                    try {
                        return ((string)(this[this.tableIVP.PATIENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“PATIENT_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableIVP.PATIENT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“PATIENT_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.PATIENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_SEX {
                get {
                    try {
                        return ((string)(this[this.tableIVP.PATIENT_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“PATIENT_SEX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.PATIENT_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STUDY_DATE_TIME {
                get {
                    try {
                        return ((string)(this[this.tableIVP.STUDY_DATE_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“STUDY_DATE_TIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.STUDY_DATE_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IVP_FILM_POSTURE_PLACE {
                get {
                    try {
                        return ((string)(this[this.tableIVP.IVP_FILM_POSTURE_PLACEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“IVP_FILM_POSTURE_PLACE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.IVP_FILM_POSTURE_PLACEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IVP_PROJECTION_CENTRAGE {
                get {
                    try {
                        return ((string)(this[this.tableIVP.IVP_PROJECTION_CENTRAGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“IVP_PROJECTION_CENTRAGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.IVP_PROJECTION_CENTRAGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IVP_PHOTOGRAPHS_ENOUGH {
                get {
                    try {
                        return ((string)(this[this.tableIVP.IVP_PHOTOGRAPHS_ENOUGHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“IVP_PHOTOGRAPHS_ENOUGH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.IVP_PHOTOGRAPHS_ENOUGHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IVP_DEVELOP {
                get {
                    try {
                        return ((string)(this[this.tableIVP.IVP_DEVELOPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“IVP_DEVELOP”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.IVP_DEVELOPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IVP_CONTRAST {
                get {
                    try {
                        return ((string)(this[this.tableIVP.IVP_CONTRASTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“IVP_CONTRAST”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.IVP_CONTRASTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IVP_LETTER_NO {
                get {
                    try {
                        return ((string)(this[this.tableIVP.IVP_LETTER_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“IVP_LETTER_NO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.IVP_LETTER_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IVP_LETTER_ARRANGE {
                get {
                    try {
                        return ((string)(this[this.tableIVP.IVP_LETTER_ARRANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“IVP_LETTER_ARRANGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.IVP_LETTER_ARRANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BASE_ASH_FOG_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableIVP.BASE_ASH_FOG_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“BASE_ASH_FOG_VALUE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.BASE_ASH_FOG_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIAGNOSE_AREA_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableIVP.DIAGNOSE_AREA_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“DIAGNOSE_AREA_VALUE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.DIAGNOSE_AREA_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLANK_EXPOSAL_DENSITY {
                get {
                    try {
                        return ((string)(this[this.tableIVP.BLANK_EXPOSAL_DENSITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“BLANK_EXPOSAL_DENSITY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.BLANK_EXPOSAL_DENSITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIRT {
                get {
                    try {
                        return ((string)(this[this.tableIVP.DIRTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“DIRT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.DIRTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NICK {
                get {
                    try {
                        return ((string)(this[this.tableIVP.NICKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“NICK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.NICKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADHIBIT {
                get {
                    try {
                        return ((string)(this[this.tableIVP.ADHIBITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“ADHIBIT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.ADHIBITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WATER_MARK {
                get {
                    try {
                        return ((string)(this[this.tableIVP.WATER_MARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“WATER_MARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.WATER_MARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FINGER_MARK {
                get {
                    try {
                        return ((string)(this[this.tableIVP.FINGER_MARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“FINGER_MARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.FINGER_MARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LIGHT_LEAK {
                get {
                    try {
                        return ((string)(this[this.tableIVP.LIGHT_LEAKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“LIGHT_LEAK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.LIGHT_LEAKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATIC_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableIVP.STATIC_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“STATIC_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.STATIC_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXTERNA_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableIVP.EXTERNA_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“EXTERNA_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.EXTERNA_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_SCORE {
                get {
                    try {
                        return ((string)(this[this.tableIVP.TOTAL_SCOREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“TOTAL_SCORE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.TOTAL_SCOREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISTINCTION {
                get {
                    try {
                        return ((string)(this[this.tableIVP.DISTINCTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“DISTINCTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.DISTINCTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER_KEY {
                get {
                    try {
                        return ((string)(this[this.tableIVP.NUMBER_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“NUMBER_KEY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.NUMBER_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_IVP_RESOLUTION {
                get {
                    try {
                        return ((string)(this[this.tableIVP.D_IVP_RESOLUTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“D_IVP_RESOLUTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.D_IVP_RESOLUTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_IVP_HIST_CONTRAST {
                get {
                    try {
                        return ((string)(this[this.tableIVP.D_IVP_HIST_CONTRASTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“D_IVP_HIST_CONTRAST”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.D_IVP_HIST_CONTRASTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_EXPOSURE_DOSE {
                get {
                    try {
                        return ((string)(this[this.tableIVP.D_EXPOSURE_DOSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“D_EXPOSURE_DOSE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.D_EXPOSURE_DOSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_FLAG_CONTENT {
                get {
                    try {
                        return ((string)(this[this.tableIVP.D_FLAG_CONTENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“D_FLAG_CONTENT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.D_FLAG_CONTENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_FLAG_PLACE_ARRANGE {
                get {
                    try {
                        return ((string)(this[this.tableIVP.D_FLAG_PLACE_ARRANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“D_FLAG_PLACE_ARRANGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.D_FLAG_PLACE_ARRANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_DEVICE_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableIVP.D_DEVICE_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“IVP”中列“D_DEVICE_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableIVP.D_DEVICE_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_ACCESSION_NUMNull() {
                return this.IsNull(this.tableIVP.EXAM_ACCESSION_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_ACCESSION_NUMNull() {
                this[this.tableIVP.EXAM_ACCESSION_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_LOCAL_IDNull() {
                return this.IsNull(this.tableIVP.PATIENT_LOCAL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_LOCAL_IDNull() {
                this[this.tableIVP.PATIENT_LOCAL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQC_DATENull() {
                return this.IsNull(this.tableIVP.QC_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQC_DATENull() {
                this[this.tableIVP.QC_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_IDNull() {
                return this.IsNull(this.tableIVP.PATIENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_IDNull() {
                this[this.tableIVP.PATIENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_NAMENull() {
                return this.IsNull(this.tableIVP.PATIENT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_NAMENull() {
                this[this.tableIVP.PATIENT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_SEXNull() {
                return this.IsNull(this.tableIVP.PATIENT_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_SEXNull() {
                this[this.tableIVP.PATIENT_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTUDY_DATE_TIMENull() {
                return this.IsNull(this.tableIVP.STUDY_DATE_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTUDY_DATE_TIMENull() {
                this[this.tableIVP.STUDY_DATE_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIVP_FILM_POSTURE_PLACENull() {
                return this.IsNull(this.tableIVP.IVP_FILM_POSTURE_PLACEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIVP_FILM_POSTURE_PLACENull() {
                this[this.tableIVP.IVP_FILM_POSTURE_PLACEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIVP_PROJECTION_CENTRAGENull() {
                return this.IsNull(this.tableIVP.IVP_PROJECTION_CENTRAGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIVP_PROJECTION_CENTRAGENull() {
                this[this.tableIVP.IVP_PROJECTION_CENTRAGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIVP_PHOTOGRAPHS_ENOUGHNull() {
                return this.IsNull(this.tableIVP.IVP_PHOTOGRAPHS_ENOUGHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIVP_PHOTOGRAPHS_ENOUGHNull() {
                this[this.tableIVP.IVP_PHOTOGRAPHS_ENOUGHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIVP_DEVELOPNull() {
                return this.IsNull(this.tableIVP.IVP_DEVELOPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIVP_DEVELOPNull() {
                this[this.tableIVP.IVP_DEVELOPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIVP_CONTRASTNull() {
                return this.IsNull(this.tableIVP.IVP_CONTRASTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIVP_CONTRASTNull() {
                this[this.tableIVP.IVP_CONTRASTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIVP_LETTER_NONull() {
                return this.IsNull(this.tableIVP.IVP_LETTER_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIVP_LETTER_NONull() {
                this[this.tableIVP.IVP_LETTER_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIVP_LETTER_ARRANGENull() {
                return this.IsNull(this.tableIVP.IVP_LETTER_ARRANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIVP_LETTER_ARRANGENull() {
                this[this.tableIVP.IVP_LETTER_ARRANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBASE_ASH_FOG_VALUENull() {
                return this.IsNull(this.tableIVP.BASE_ASH_FOG_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBASE_ASH_FOG_VALUENull() {
                this[this.tableIVP.BASE_ASH_FOG_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIAGNOSE_AREA_VALUENull() {
                return this.IsNull(this.tableIVP.DIAGNOSE_AREA_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIAGNOSE_AREA_VALUENull() {
                this[this.tableIVP.DIAGNOSE_AREA_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLANK_EXPOSAL_DENSITYNull() {
                return this.IsNull(this.tableIVP.BLANK_EXPOSAL_DENSITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLANK_EXPOSAL_DENSITYNull() {
                this[this.tableIVP.BLANK_EXPOSAL_DENSITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIRTNull() {
                return this.IsNull(this.tableIVP.DIRTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIRTNull() {
                this[this.tableIVP.DIRTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNICKNull() {
                return this.IsNull(this.tableIVP.NICKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNICKNull() {
                this[this.tableIVP.NICKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADHIBITNull() {
                return this.IsNull(this.tableIVP.ADHIBITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADHIBITNull() {
                this[this.tableIVP.ADHIBITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWATER_MARKNull() {
                return this.IsNull(this.tableIVP.WATER_MARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWATER_MARKNull() {
                this[this.tableIVP.WATER_MARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINGER_MARKNull() {
                return this.IsNull(this.tableIVP.FINGER_MARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINGER_MARKNull() {
                this[this.tableIVP.FINGER_MARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIGHT_LEAKNull() {
                return this.IsNull(this.tableIVP.LIGHT_LEAKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIGHT_LEAKNull() {
                this[this.tableIVP.LIGHT_LEAKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATIC_SHADOWNull() {
                return this.IsNull(this.tableIVP.STATIC_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATIC_SHADOWNull() {
                this[this.tableIVP.STATIC_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXTERNA_SHADOWNull() {
                return this.IsNull(this.tableIVP.EXTERNA_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXTERNA_SHADOWNull() {
                this[this.tableIVP.EXTERNA_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_SCORENull() {
                return this.IsNull(this.tableIVP.TOTAL_SCOREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_SCORENull() {
                this[this.tableIVP.TOTAL_SCOREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISTINCTIONNull() {
                return this.IsNull(this.tableIVP.DISTINCTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISTINCTIONNull() {
                this[this.tableIVP.DISTINCTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBER_KEYNull() {
                return this.IsNull(this.tableIVP.NUMBER_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBER_KEYNull() {
                this[this.tableIVP.NUMBER_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_IVP_RESOLUTIONNull() {
                return this.IsNull(this.tableIVP.D_IVP_RESOLUTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_IVP_RESOLUTIONNull() {
                this[this.tableIVP.D_IVP_RESOLUTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_IVP_HIST_CONTRASTNull() {
                return this.IsNull(this.tableIVP.D_IVP_HIST_CONTRASTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_IVP_HIST_CONTRASTNull() {
                this[this.tableIVP.D_IVP_HIST_CONTRASTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_EXPOSURE_DOSENull() {
                return this.IsNull(this.tableIVP.D_EXPOSURE_DOSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_EXPOSURE_DOSENull() {
                this[this.tableIVP.D_EXPOSURE_DOSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_FLAG_CONTENTNull() {
                return this.IsNull(this.tableIVP.D_FLAG_CONTENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_FLAG_CONTENTNull() {
                this[this.tableIVP.D_FLAG_CONTENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_FLAG_PLACE_ARRANGENull() {
                return this.IsNull(this.tableIVP.D_FLAG_PLACE_ARRANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_FLAG_PLACE_ARRANGENull() {
                this[this.tableIVP.D_FLAG_PLACE_ARRANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_DEVICE_SHADOWNull() {
                return this.IsNull(this.tableIVP.D_DEVICE_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_DEVICE_SHADOWNull() {
                this[this.tableIVP.D_DEVICE_SHADOWColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class UGIRow : global::System.Data.DataRow {
            
            private UGIDataTable tableUGI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UGIRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUGI = ((UGIDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_ACCESSION_NUM {
                get {
                    try {
                        return ((string)(this[this.tableUGI.EXAM_ACCESSION_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“EXAM_ACCESSION_NUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.EXAM_ACCESSION_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_LOCAL_ID {
                get {
                    try {
                        return ((string)(this[this.tableUGI.PATIENT_LOCAL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“PATIENT_LOCAL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.PATIENT_LOCAL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QC_DATE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.QC_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“QC_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.QC_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_ID {
                get {
                    try {
                        return ((string)(this[this.tableUGI.PATIENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“PATIENT_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableUGI.PATIENT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“PATIENT_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.PATIENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_SEX {
                get {
                    try {
                        return ((string)(this[this.tableUGI.PATIENT_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“PATIENT_SEX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.PATIENT_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STUDY_DATE_TIME {
                get {
                    try {
                        return ((string)(this[this.tableUGI.STUDY_DATE_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“STUDY_DATE_TIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.STUDY_DATE_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UGI_PROJECTION_CASE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.UGI_PROJECTION_CASEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“UGI_PROJECTION_CASE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.UGI_PROJECTION_CASEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UGI_INDICATION_RANGE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.UGI_INDICATION_RANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“UGI_INDICATION_RANGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.UGI_INDICATION_RANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UGI_PHOTOGRAPHS_ENOUGH {
                get {
                    try {
                        return ((string)(this[this.tableUGI.UGI_PHOTOGRAPHS_ENOUGHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“UGI_PHOTOGRAPHS_ENOUGH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.UGI_PHOTOGRAPHS_ENOUGHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UGI_CAVITY_LINE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.UGI_CAVITY_LINEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“UGI_CAVITY_LINE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.UGI_CAVITY_LINEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UGI_BLEB {
                get {
                    try {
                        return ((string)(this[this.tableUGI.UGI_BLEBColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“UGI_BLEB”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.UGI_BLEBColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UGI_FLOCCULENCE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.UGI_FLOCCULENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“UGI_FLOCCULENCE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.UGI_FLOCCULENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UGI_MUCOSAL_FOLD {
                get {
                    try {
                        return ((string)(this[this.tableUGI.UGI_MUCOSAL_FOLDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“UGI_MUCOSAL_FOLD”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.UGI_MUCOSAL_FOLDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UGI_CONTRAST {
                get {
                    try {
                        return ((string)(this[this.tableUGI.UGI_CONTRASTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“UGI_CONTRAST”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.UGI_CONTRASTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UGI_INF_CRITERION {
                get {
                    try {
                        return ((string)(this[this.tableUGI.UGI_INF_CRITERIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“UGI_INF_CRITERION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.UGI_INF_CRITERIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BASE_ASH_FOG_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.BASE_ASH_FOG_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“BASE_ASH_FOG_VALUE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.BASE_ASH_FOG_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIAGNOSE_AREA_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.DIAGNOSE_AREA_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“DIAGNOSE_AREA_VALUE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.DIAGNOSE_AREA_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLANK_EXPOSAL_DENSITY {
                get {
                    try {
                        return ((string)(this[this.tableUGI.BLANK_EXPOSAL_DENSITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“BLANK_EXPOSAL_DENSITY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.BLANK_EXPOSAL_DENSITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIRT {
                get {
                    try {
                        return ((string)(this[this.tableUGI.DIRTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“DIRT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.DIRTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NICK {
                get {
                    try {
                        return ((string)(this[this.tableUGI.NICKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“NICK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.NICKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADHIBIT {
                get {
                    try {
                        return ((string)(this[this.tableUGI.ADHIBITColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“ADHIBIT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.ADHIBITColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WATER_MARK {
                get {
                    try {
                        return ((string)(this[this.tableUGI.WATER_MARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“WATER_MARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.WATER_MARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FINGER_MARK {
                get {
                    try {
                        return ((string)(this[this.tableUGI.FINGER_MARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“FINGER_MARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.FINGER_MARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LIGHT_LEAK {
                get {
                    try {
                        return ((string)(this[this.tableUGI.LIGHT_LEAKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“LIGHT_LEAK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.LIGHT_LEAKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATIC_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableUGI.STATIC_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“STATIC_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.STATIC_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXTERNA_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableUGI.EXTERNA_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“EXTERNA_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.EXTERNA_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_SCORE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.TOTAL_SCOREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“TOTAL_SCORE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.TOTAL_SCOREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISTINCTION {
                get {
                    try {
                        return ((string)(this[this.tableUGI.DISTINCTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“DISTINCTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.DISTINCTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER_KEY {
                get {
                    try {
                        return ((string)(this[this.tableUGI.NUMBER_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“NUMBER_KEY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.NUMBER_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_EXPOSURE_DOSE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.D_EXPOSURE_DOSEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“D_EXPOSURE_DOSE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.D_EXPOSURE_DOSEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_FLAG_CONTENT {
                get {
                    try {
                        return ((string)(this[this.tableUGI.D_FLAG_CONTENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“D_FLAG_CONTENT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.D_FLAG_CONTENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_FLAG_PLACE_ARRANGE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.D_FLAG_PLACE_ARRANGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“D_FLAG_PLACE_ARRANGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.D_FLAG_PLACE_ARRANGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_DEVICE_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableUGI.D_DEVICE_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“D_DEVICE_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.D_DEVICE_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string UGI_PATIENT_TYPE {
                get {
                    try {
                        return ((string)(this[this.tableUGI.UGI_PATIENT_TYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“UGI”中列“UGI_PATIENT_TYPE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableUGI.UGI_PATIENT_TYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_ACCESSION_NUMNull() {
                return this.IsNull(this.tableUGI.EXAM_ACCESSION_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_ACCESSION_NUMNull() {
                this[this.tableUGI.EXAM_ACCESSION_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_LOCAL_IDNull() {
                return this.IsNull(this.tableUGI.PATIENT_LOCAL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_LOCAL_IDNull() {
                this[this.tableUGI.PATIENT_LOCAL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQC_DATENull() {
                return this.IsNull(this.tableUGI.QC_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQC_DATENull() {
                this[this.tableUGI.QC_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_IDNull() {
                return this.IsNull(this.tableUGI.PATIENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_IDNull() {
                this[this.tableUGI.PATIENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_NAMENull() {
                return this.IsNull(this.tableUGI.PATIENT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_NAMENull() {
                this[this.tableUGI.PATIENT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_SEXNull() {
                return this.IsNull(this.tableUGI.PATIENT_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_SEXNull() {
                this[this.tableUGI.PATIENT_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTUDY_DATE_TIMENull() {
                return this.IsNull(this.tableUGI.STUDY_DATE_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTUDY_DATE_TIMENull() {
                this[this.tableUGI.STUDY_DATE_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUGI_PROJECTION_CASENull() {
                return this.IsNull(this.tableUGI.UGI_PROJECTION_CASEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUGI_PROJECTION_CASENull() {
                this[this.tableUGI.UGI_PROJECTION_CASEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUGI_INDICATION_RANGENull() {
                return this.IsNull(this.tableUGI.UGI_INDICATION_RANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUGI_INDICATION_RANGENull() {
                this[this.tableUGI.UGI_INDICATION_RANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUGI_PHOTOGRAPHS_ENOUGHNull() {
                return this.IsNull(this.tableUGI.UGI_PHOTOGRAPHS_ENOUGHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUGI_PHOTOGRAPHS_ENOUGHNull() {
                this[this.tableUGI.UGI_PHOTOGRAPHS_ENOUGHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUGI_CAVITY_LINENull() {
                return this.IsNull(this.tableUGI.UGI_CAVITY_LINEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUGI_CAVITY_LINENull() {
                this[this.tableUGI.UGI_CAVITY_LINEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUGI_BLEBNull() {
                return this.IsNull(this.tableUGI.UGI_BLEBColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUGI_BLEBNull() {
                this[this.tableUGI.UGI_BLEBColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUGI_FLOCCULENCENull() {
                return this.IsNull(this.tableUGI.UGI_FLOCCULENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUGI_FLOCCULENCENull() {
                this[this.tableUGI.UGI_FLOCCULENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUGI_MUCOSAL_FOLDNull() {
                return this.IsNull(this.tableUGI.UGI_MUCOSAL_FOLDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUGI_MUCOSAL_FOLDNull() {
                this[this.tableUGI.UGI_MUCOSAL_FOLDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUGI_CONTRASTNull() {
                return this.IsNull(this.tableUGI.UGI_CONTRASTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUGI_CONTRASTNull() {
                this[this.tableUGI.UGI_CONTRASTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUGI_INF_CRITERIONNull() {
                return this.IsNull(this.tableUGI.UGI_INF_CRITERIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUGI_INF_CRITERIONNull() {
                this[this.tableUGI.UGI_INF_CRITERIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBASE_ASH_FOG_VALUENull() {
                return this.IsNull(this.tableUGI.BASE_ASH_FOG_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBASE_ASH_FOG_VALUENull() {
                this[this.tableUGI.BASE_ASH_FOG_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIAGNOSE_AREA_VALUENull() {
                return this.IsNull(this.tableUGI.DIAGNOSE_AREA_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIAGNOSE_AREA_VALUENull() {
                this[this.tableUGI.DIAGNOSE_AREA_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLANK_EXPOSAL_DENSITYNull() {
                return this.IsNull(this.tableUGI.BLANK_EXPOSAL_DENSITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLANK_EXPOSAL_DENSITYNull() {
                this[this.tableUGI.BLANK_EXPOSAL_DENSITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIRTNull() {
                return this.IsNull(this.tableUGI.DIRTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIRTNull() {
                this[this.tableUGI.DIRTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNICKNull() {
                return this.IsNull(this.tableUGI.NICKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNICKNull() {
                this[this.tableUGI.NICKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADHIBITNull() {
                return this.IsNull(this.tableUGI.ADHIBITColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADHIBITNull() {
                this[this.tableUGI.ADHIBITColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWATER_MARKNull() {
                return this.IsNull(this.tableUGI.WATER_MARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWATER_MARKNull() {
                this[this.tableUGI.WATER_MARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINGER_MARKNull() {
                return this.IsNull(this.tableUGI.FINGER_MARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINGER_MARKNull() {
                this[this.tableUGI.FINGER_MARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIGHT_LEAKNull() {
                return this.IsNull(this.tableUGI.LIGHT_LEAKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIGHT_LEAKNull() {
                this[this.tableUGI.LIGHT_LEAKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATIC_SHADOWNull() {
                return this.IsNull(this.tableUGI.STATIC_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATIC_SHADOWNull() {
                this[this.tableUGI.STATIC_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXTERNA_SHADOWNull() {
                return this.IsNull(this.tableUGI.EXTERNA_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXTERNA_SHADOWNull() {
                this[this.tableUGI.EXTERNA_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_SCORENull() {
                return this.IsNull(this.tableUGI.TOTAL_SCOREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_SCORENull() {
                this[this.tableUGI.TOTAL_SCOREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISTINCTIONNull() {
                return this.IsNull(this.tableUGI.DISTINCTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISTINCTIONNull() {
                this[this.tableUGI.DISTINCTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBER_KEYNull() {
                return this.IsNull(this.tableUGI.NUMBER_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBER_KEYNull() {
                this[this.tableUGI.NUMBER_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_EXPOSURE_DOSENull() {
                return this.IsNull(this.tableUGI.D_EXPOSURE_DOSEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_EXPOSURE_DOSENull() {
                this[this.tableUGI.D_EXPOSURE_DOSEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_FLAG_CONTENTNull() {
                return this.IsNull(this.tableUGI.D_FLAG_CONTENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_FLAG_CONTENTNull() {
                this[this.tableUGI.D_FLAG_CONTENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_FLAG_PLACE_ARRANGENull() {
                return this.IsNull(this.tableUGI.D_FLAG_PLACE_ARRANGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_FLAG_PLACE_ARRANGENull() {
                this[this.tableUGI.D_FLAG_PLACE_ARRANGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_DEVICE_SHADOWNull() {
                return this.IsNull(this.tableUGI.D_DEVICE_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_DEVICE_SHADOWNull() {
                this[this.tableUGI.D_DEVICE_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUGI_PATIENT_TYPENull() {
                return this.IsNull(this.tableUGI.UGI_PATIENT_TYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUGI_PATIENT_TYPENull() {
                this[this.tableUGI.UGI_PATIENT_TYPEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class CTRow : global::System.Data.DataRow {
            
            private CTDataTable tableCT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal CTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableCT = ((CTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_ACCESSION_NUM {
                get {
                    try {
                        return ((string)(this[this.tableCT.EXAM_ACCESSION_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“EXAM_ACCESSION_NUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.EXAM_ACCESSION_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_LOCAL_ID {
                get {
                    try {
                        return ((string)(this[this.tableCT.PATIENT_LOCAL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“PATIENT_LOCAL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.PATIENT_LOCAL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QC_DATE {
                get {
                    try {
                        return ((string)(this[this.tableCT.QC_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“QC_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.QC_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_ID {
                get {
                    try {
                        return ((string)(this[this.tableCT.PATIENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“PATIENT_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableCT.PATIENT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“PATIENT_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.PATIENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_SEX {
                get {
                    try {
                        return ((string)(this[this.tableCT.PATIENT_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“PATIENT_SEX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.PATIENT_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STUDY_DATE_TIME {
                get {
                    try {
                        return ((string)(this[this.tableCT.STUDY_DATE_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“STUDY_DATE_TIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.STUDY_DATE_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POSTURE_CHOICE {
                get {
                    try {
                        return ((string)(this[this.tableCT.POSTURE_CHOICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“POSTURE_CHOICE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.POSTURE_CHOICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCANNING_SCOPE {
                get {
                    try {
                        return ((string)(this[this.tableCT.SCANNING_SCOPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“SCANNING_SCOPE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.SCANNING_SCOPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VISCERA_SCANNING {
                get {
                    try {
                        return ((string)(this[this.tableCT.VISCERA_SCANNINGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“VISCERA_SCANNING”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.VISCERA_SCANNINGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCANNING_MODE {
                get {
                    try {
                        return ((string)(this[this.tableCT.SCANNING_MODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“SCANNING_MODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.SCANNING_MODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RESOLUTION {
                get {
                    try {
                        return ((string)(this[this.tableCT.RESOLUTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“RESOLUTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.RESOLUTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INF_CRITERION {
                get {
                    try {
                        return ((string)(this[this.tableCT.INF_CRITERIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“INF_CRITERION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.INF_CRITERIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WL_WWIDTH {
                get {
                    try {
                        return ((string)(this[this.tableCT.WL_WWIDTHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“WL_WWIDTH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.WL_WWIDTHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXTERNA_BREATH_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableCT.EXTERNA_BREATH_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“EXTERNA_BREATH_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.EXTERNA_BREATH_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BASE_ASH_FOG_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableCT.BASE_ASH_FOG_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“BASE_ASH_FOG_VALUE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.BASE_ASH_FOG_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILM_FORMAT {
                get {
                    try {
                        return ((string)(this[this.tableCT.FILM_FORMATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“FILM_FORMAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.FILM_FORMATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BLANK_EXPOSAL_DENSITY {
                get {
                    try {
                        return ((string)(this[this.tableCT.BLANK_EXPOSAL_DENSITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“BLANK_EXPOSAL_DENSITY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.BLANK_EXPOSAL_DENSITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NICK {
                get {
                    try {
                        return ((string)(this[this.tableCT.NICKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“NICK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.NICKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WATER_MARK {
                get {
                    try {
                        return ((string)(this[this.tableCT.WATER_MARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“WATER_MARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.WATER_MARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FINGER_MARK {
                get {
                    try {
                        return ((string)(this[this.tableCT.FINGER_MARKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“FINGER_MARK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.FINGER_MARKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LIGHT_LEAK {
                get {
                    try {
                        return ((string)(this[this.tableCT.LIGHT_LEAKColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“LIGHT_LEAK”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.LIGHT_LEAKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STATIC_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableCT.STATIC_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“STATIC_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.STATIC_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_STRIP_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableCT.D_STRIP_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“D_STRIP_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.D_STRIP_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_SCORE {
                get {
                    try {
                        return ((string)(this[this.tableCT.TOTAL_SCOREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“TOTAL_SCORE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.TOTAL_SCOREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISTINCTION {
                get {
                    try {
                        return ((string)(this[this.tableCT.DISTINCTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“DISTINCTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.DISTINCTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER_KEY {
                get {
                    try {
                        return ((string)(this[this.tableCT.NUMBER_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“NUMBER_KEY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.NUMBER_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_CTN {
                get {
                    try {
                        return ((string)(this[this.tableCT.D_CTNColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“D_CTN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.D_CTNColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_FAST_CONSULT {
                get {
                    try {
                        return ((string)(this[this.tableCT.D_FAST_CONSULTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“D_FAST_CONSULT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.D_FAST_CONSULTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_DEVICE_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableCT.D_DEVICE_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“CT”中列“D_DEVICE_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableCT.D_DEVICE_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_ACCESSION_NUMNull() {
                return this.IsNull(this.tableCT.EXAM_ACCESSION_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_ACCESSION_NUMNull() {
                this[this.tableCT.EXAM_ACCESSION_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_LOCAL_IDNull() {
                return this.IsNull(this.tableCT.PATIENT_LOCAL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_LOCAL_IDNull() {
                this[this.tableCT.PATIENT_LOCAL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQC_DATENull() {
                return this.IsNull(this.tableCT.QC_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQC_DATENull() {
                this[this.tableCT.QC_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_IDNull() {
                return this.IsNull(this.tableCT.PATIENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_IDNull() {
                this[this.tableCT.PATIENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_NAMENull() {
                return this.IsNull(this.tableCT.PATIENT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_NAMENull() {
                this[this.tableCT.PATIENT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_SEXNull() {
                return this.IsNull(this.tableCT.PATIENT_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_SEXNull() {
                this[this.tableCT.PATIENT_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTUDY_DATE_TIMENull() {
                return this.IsNull(this.tableCT.STUDY_DATE_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTUDY_DATE_TIMENull() {
                this[this.tableCT.STUDY_DATE_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOSTURE_CHOICENull() {
                return this.IsNull(this.tableCT.POSTURE_CHOICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOSTURE_CHOICENull() {
                this[this.tableCT.POSTURE_CHOICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCANNING_SCOPENull() {
                return this.IsNull(this.tableCT.SCANNING_SCOPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCANNING_SCOPENull() {
                this[this.tableCT.SCANNING_SCOPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVISCERA_SCANNINGNull() {
                return this.IsNull(this.tableCT.VISCERA_SCANNINGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVISCERA_SCANNINGNull() {
                this[this.tableCT.VISCERA_SCANNINGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCANNING_MODENull() {
                return this.IsNull(this.tableCT.SCANNING_MODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCANNING_MODENull() {
                this[this.tableCT.SCANNING_MODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESOLUTIONNull() {
                return this.IsNull(this.tableCT.RESOLUTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESOLUTIONNull() {
                this[this.tableCT.RESOLUTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINF_CRITERIONNull() {
                return this.IsNull(this.tableCT.INF_CRITERIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINF_CRITERIONNull() {
                this[this.tableCT.INF_CRITERIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWL_WWIDTHNull() {
                return this.IsNull(this.tableCT.WL_WWIDTHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWL_WWIDTHNull() {
                this[this.tableCT.WL_WWIDTHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXTERNA_BREATH_SHADOWNull() {
                return this.IsNull(this.tableCT.EXTERNA_BREATH_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXTERNA_BREATH_SHADOWNull() {
                this[this.tableCT.EXTERNA_BREATH_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBASE_ASH_FOG_VALUENull() {
                return this.IsNull(this.tableCT.BASE_ASH_FOG_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBASE_ASH_FOG_VALUENull() {
                this[this.tableCT.BASE_ASH_FOG_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFILM_FORMATNull() {
                return this.IsNull(this.tableCT.FILM_FORMATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFILM_FORMATNull() {
                this[this.tableCT.FILM_FORMATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBLANK_EXPOSAL_DENSITYNull() {
                return this.IsNull(this.tableCT.BLANK_EXPOSAL_DENSITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBLANK_EXPOSAL_DENSITYNull() {
                this[this.tableCT.BLANK_EXPOSAL_DENSITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNICKNull() {
                return this.IsNull(this.tableCT.NICKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNICKNull() {
                this[this.tableCT.NICKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWATER_MARKNull() {
                return this.IsNull(this.tableCT.WATER_MARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWATER_MARKNull() {
                this[this.tableCT.WATER_MARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFINGER_MARKNull() {
                return this.IsNull(this.tableCT.FINGER_MARKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFINGER_MARKNull() {
                this[this.tableCT.FINGER_MARKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLIGHT_LEAKNull() {
                return this.IsNull(this.tableCT.LIGHT_LEAKColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLIGHT_LEAKNull() {
                this[this.tableCT.LIGHT_LEAKColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTATIC_SHADOWNull() {
                return this.IsNull(this.tableCT.STATIC_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTATIC_SHADOWNull() {
                this[this.tableCT.STATIC_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_STRIP_SHADOWNull() {
                return this.IsNull(this.tableCT.D_STRIP_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_STRIP_SHADOWNull() {
                this[this.tableCT.D_STRIP_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_SCORENull() {
                return this.IsNull(this.tableCT.TOTAL_SCOREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_SCORENull() {
                this[this.tableCT.TOTAL_SCOREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISTINCTIONNull() {
                return this.IsNull(this.tableCT.DISTINCTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISTINCTIONNull() {
                this[this.tableCT.DISTINCTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBER_KEYNull() {
                return this.IsNull(this.tableCT.NUMBER_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBER_KEYNull() {
                this[this.tableCT.NUMBER_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_CTNNull() {
                return this.IsNull(this.tableCT.D_CTNColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_CTNNull() {
                this[this.tableCT.D_CTNColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_FAST_CONSULTNull() {
                return this.IsNull(this.tableCT.D_FAST_CONSULTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_FAST_CONSULTNull() {
                this[this.tableCT.D_FAST_CONSULTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_DEVICE_SHADOWNull() {
                return this.IsNull(this.tableCT.D_DEVICE_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_DEVICE_SHADOWNull() {
                this[this.tableCT.D_DEVICE_SHADOWColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MRIRow : global::System.Data.DataRow {
            
            private MRIDataTable tableMRI;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MRIRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMRI = ((MRIDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_ACCESSION_NUM {
                get {
                    try {
                        return ((string)(this[this.tableMRI.EXAM_ACCESSION_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“EXAM_ACCESSION_NUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.EXAM_ACCESSION_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_LOCAL_ID {
                get {
                    try {
                        return ((string)(this[this.tableMRI.PATIENT_LOCAL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“PATIENT_LOCAL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.PATIENT_LOCAL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QC_DATE {
                get {
                    try {
                        return ((string)(this[this.tableMRI.QC_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“QC_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.QC_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_ID {
                get {
                    try {
                        return ((string)(this[this.tableMRI.PATIENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“PATIENT_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableMRI.PATIENT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“PATIENT_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.PATIENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_SEX {
                get {
                    try {
                        return ((string)(this[this.tableMRI.PATIENT_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“PATIENT_SEX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.PATIENT_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STUDY_DATE_TIME {
                get {
                    try {
                        return ((string)(this[this.tableMRI.STUDY_DATE_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“STUDY_DATE_TIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.STUDY_DATE_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POSTURE_CHOICE {
                get {
                    try {
                        return ((string)(this[this.tableMRI.POSTURE_CHOICEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“POSTURE_CHOICE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.POSTURE_CHOICEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCANNING_SCOPE {
                get {
                    try {
                        return ((string)(this[this.tableMRI.SCANNING_SCOPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“SCANNING_SCOPE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.SCANNING_SCOPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VISCERA_SCANNING {
                get {
                    try {
                        return ((string)(this[this.tableMRI.VISCERA_SCANNINGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“VISCERA_SCANNING”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.VISCERA_SCANNINGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RESOLUTION {
                get {
                    try {
                        return ((string)(this[this.tableMRI.RESOLUTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“RESOLUTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.RESOLUTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INF_CRITERION {
                get {
                    try {
                        return ((string)(this[this.tableMRI.INF_CRITERIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“INF_CRITERION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.INF_CRITERIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SCANNING_MODE {
                get {
                    try {
                        return ((string)(this[this.tableMRI.SCANNING_MODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“SCANNING_MODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.SCANNING_MODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERIES_LEVEL_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableMRI.SERIES_LEVEL_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“SERIES_LEVEL_NUMBER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.SERIES_LEVEL_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXTERNA_METAL_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableMRI.EXTERNA_METAL_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“EXTERNA_METAL_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.EXTERNA_METAL_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BASE_ASH_FOG_VALUE {
                get {
                    try {
                        return ((string)(this[this.tableMRI.BASE_ASH_FOG_VALUEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“BASE_ASH_FOG_VALUE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.BASE_ASH_FOG_VALUEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string BRIM_BACKGROUND_DENSITY {
                get {
                    try {
                        return ((string)(this[this.tableMRI.BRIM_BACKGROUND_DENSITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“BRIM_BACKGROUND_DENSITY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.BRIM_BACKGROUND_DENSITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FILM_FORMAT {
                get {
                    try {
                        return ((string)(this[this.tableMRI.FILM_FORMATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“FILM_FORMAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.FILM_FORMATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OPE_RESULT {
                get {
                    try {
                        return ((string)(this[this.tableMRI.OPE_RESULTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“OPE_RESULT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.OPE_RESULTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_STRUCTURE_RESOLUTION {
                get {
                    try {
                        return ((string)(this[this.tableMRI.D_STRUCTURE_RESOLUTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“D_STRUCTURE_RESOLUTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.D_STRUCTURE_RESOLUTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_HIST_CONTRAST {
                get {
                    try {
                        return ((string)(this[this.tableMRI.D_HIST_CONTRASTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“D_HIST_CONTRAST”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.D_HIST_CONTRASTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_FAST_CONSULT {
                get {
                    try {
                        return ((string)(this[this.tableMRI.D_FAST_CONSULTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“D_FAST_CONSULT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.D_FAST_CONSULTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_SCORE {
                get {
                    try {
                        return ((string)(this[this.tableMRI.TOTAL_SCOREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“TOTAL_SCORE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.TOTAL_SCOREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISTINCTION {
                get {
                    try {
                        return ((string)(this[this.tableMRI.DISTINCTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“DISTINCTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.DISTINCTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER_KEY {
                get {
                    try {
                        return ((string)(this[this.tableMRI.NUMBER_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“NUMBER_KEY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.NUMBER_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string D_DEVICE_SHADOW {
                get {
                    try {
                        return ((string)(this[this.tableMRI.D_DEVICE_SHADOWColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“MRI”中列“D_DEVICE_SHADOW”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableMRI.D_DEVICE_SHADOWColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_ACCESSION_NUMNull() {
                return this.IsNull(this.tableMRI.EXAM_ACCESSION_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_ACCESSION_NUMNull() {
                this[this.tableMRI.EXAM_ACCESSION_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_LOCAL_IDNull() {
                return this.IsNull(this.tableMRI.PATIENT_LOCAL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_LOCAL_IDNull() {
                this[this.tableMRI.PATIENT_LOCAL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQC_DATENull() {
                return this.IsNull(this.tableMRI.QC_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQC_DATENull() {
                this[this.tableMRI.QC_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_IDNull() {
                return this.IsNull(this.tableMRI.PATIENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_IDNull() {
                this[this.tableMRI.PATIENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_NAMENull() {
                return this.IsNull(this.tableMRI.PATIENT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_NAMENull() {
                this[this.tableMRI.PATIENT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_SEXNull() {
                return this.IsNull(this.tableMRI.PATIENT_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_SEXNull() {
                this[this.tableMRI.PATIENT_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTUDY_DATE_TIMENull() {
                return this.IsNull(this.tableMRI.STUDY_DATE_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTUDY_DATE_TIMENull() {
                this[this.tableMRI.STUDY_DATE_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOSTURE_CHOICENull() {
                return this.IsNull(this.tableMRI.POSTURE_CHOICEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOSTURE_CHOICENull() {
                this[this.tableMRI.POSTURE_CHOICEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCANNING_SCOPENull() {
                return this.IsNull(this.tableMRI.SCANNING_SCOPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCANNING_SCOPENull() {
                this[this.tableMRI.SCANNING_SCOPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVISCERA_SCANNINGNull() {
                return this.IsNull(this.tableMRI.VISCERA_SCANNINGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVISCERA_SCANNINGNull() {
                this[this.tableMRI.VISCERA_SCANNINGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESOLUTIONNull() {
                return this.IsNull(this.tableMRI.RESOLUTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESOLUTIONNull() {
                this[this.tableMRI.RESOLUTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINF_CRITERIONNull() {
                return this.IsNull(this.tableMRI.INF_CRITERIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINF_CRITERIONNull() {
                this[this.tableMRI.INF_CRITERIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSCANNING_MODENull() {
                return this.IsNull(this.tableMRI.SCANNING_MODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSCANNING_MODENull() {
                this[this.tableMRI.SCANNING_MODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERIES_LEVEL_NUMBERNull() {
                return this.IsNull(this.tableMRI.SERIES_LEVEL_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERIES_LEVEL_NUMBERNull() {
                this[this.tableMRI.SERIES_LEVEL_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXTERNA_METAL_SHADOWNull() {
                return this.IsNull(this.tableMRI.EXTERNA_METAL_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXTERNA_METAL_SHADOWNull() {
                this[this.tableMRI.EXTERNA_METAL_SHADOWColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBASE_ASH_FOG_VALUENull() {
                return this.IsNull(this.tableMRI.BASE_ASH_FOG_VALUEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBASE_ASH_FOG_VALUENull() {
                this[this.tableMRI.BASE_ASH_FOG_VALUEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBRIM_BACKGROUND_DENSITYNull() {
                return this.IsNull(this.tableMRI.BRIM_BACKGROUND_DENSITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetBRIM_BACKGROUND_DENSITYNull() {
                this[this.tableMRI.BRIM_BACKGROUND_DENSITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFILM_FORMATNull() {
                return this.IsNull(this.tableMRI.FILM_FORMATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFILM_FORMATNull() {
                this[this.tableMRI.FILM_FORMATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPE_RESULTNull() {
                return this.IsNull(this.tableMRI.OPE_RESULTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPE_RESULTNull() {
                this[this.tableMRI.OPE_RESULTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_STRUCTURE_RESOLUTIONNull() {
                return this.IsNull(this.tableMRI.D_STRUCTURE_RESOLUTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_STRUCTURE_RESOLUTIONNull() {
                this[this.tableMRI.D_STRUCTURE_RESOLUTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_HIST_CONTRASTNull() {
                return this.IsNull(this.tableMRI.D_HIST_CONTRASTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_HIST_CONTRASTNull() {
                this[this.tableMRI.D_HIST_CONTRASTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_FAST_CONSULTNull() {
                return this.IsNull(this.tableMRI.D_FAST_CONSULTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_FAST_CONSULTNull() {
                this[this.tableMRI.D_FAST_CONSULTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_SCORENull() {
                return this.IsNull(this.tableMRI.TOTAL_SCOREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_SCORENull() {
                this[this.tableMRI.TOTAL_SCOREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISTINCTIONNull() {
                return this.IsNull(this.tableMRI.DISTINCTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISTINCTIONNull() {
                this[this.tableMRI.DISTINCTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBER_KEYNull() {
                return this.IsNull(this.tableMRI.NUMBER_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBER_KEYNull() {
                this[this.tableMRI.NUMBER_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsD_DEVICE_SHADOWNull() {
                return this.IsNull(this.tableMRI.D_DEVICE_SHADOWColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetD_DEVICE_SHADOWNull() {
                this[this.tableMRI.D_DEVICE_SHADOWColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class DEPT_MAN_DICTRow : global::System.Data.DataRow {
            
            private DEPT_MAN_DICTDataTable tableDEPT_MAN_DICT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DEPT_MAN_DICTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDEPT_MAN_DICT = ((DEPT_MAN_DICTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEPT_MAN_KEY {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEPT_MAN_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEPT_MAN_KEY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEPT_MAN_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QC_DATE {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.QC_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“QC_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.QC_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RY_LICENCE {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.RY_LICENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“RY_LICENCE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.RY_LICENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_RY_LICENCE {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_RY_LICENCEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_RY_LICENCE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_RY_LICENCEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TITLES {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.TITLESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“TITLES”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.TITLESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_TITLES {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_TITLESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_TITLES”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_TITLESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string POST_TRAIN {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.POST_TRAINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“POST_TRAIN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.POST_TRAINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_POST_TRAIN {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_POST_TRAINColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_POST_TRAIN”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_POST_TRAINColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CRITERION_INTEGRALITY {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.CRITERION_INTEGRALITYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“CRITERION_INTEGRALITY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.CRITERION_INTEGRALITYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_CRI_INT {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_CRI_INTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_CRI_INT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_CRI_INTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MANAGEMENT_SYSTEM {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.MANAGEMENT_SYSTEMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“MANAGEMENT_SYSTEM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.MANAGEMENT_SYSTEMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_MAN_SYS {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_MAN_SYSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_MAN_SYS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_MAN_SYSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IMAGE_SYSTEM {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.IMAGE_SYSTEMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“IMAGE_SYSTEM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.IMAGE_SYSTEMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_IMAGE_SYS {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_IMAGE_SYSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_IMAGE_SYS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_IMAGE_SYSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PREVENTIVE_MEASURE {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.PREVENTIVE_MEASUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“PREVENTIVE_MEASURE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.PREVENTIVE_MEASUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_PRE_MEA {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_PRE_MEAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_PRE_MEA”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_PRE_MEAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SERVICES_ITEMS {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.SERVICES_ITEMSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“SERVICES_ITEMS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.SERVICES_ITEMSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_SER_ITEMS {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_SER_ITEMSColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_SER_ITEMS”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_SER_ITEMSColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EMERGENCY_EXAM {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.EMERGENCY_EXAMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“EMERGENCY_EXAM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.EMERGENCY_EXAMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_EME_EXAM {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_EME_EXAMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_EME_EXAM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_EME_EXAMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DIAG_REPORT {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DIAG_REPORTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DIAG_REPORT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DIAG_REPORTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_DIAG_RPT {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_DIAG_RPTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_DIAG_RPT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_DIAG_RPTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MANAGEMENT {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.MANAGEMENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“MANAGEMENT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.MANAGEMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_MANAGEMENT {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_MANAGEMENTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_MANAGEMENT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_MANAGEMENTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string REGISTER_STAT {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.REGISTER_STATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“REGISTER_STAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.REGISTER_STATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_REG_STAT {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_REG_STATColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_REG_STAT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_REG_STATColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OVERSEE_RESULT {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.OVERSEE_RESULTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“OVERSEE_RESULT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.OVERSEE_RESULTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DEDU_GIST_OS_RES {
                get {
                    try {
                        return ((string)(this[this.tableDEPT_MAN_DICT.DEDU_GIST_OS_RESColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“DEPT_MAN_DICT”中列“DEDU_GIST_OS_RES”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableDEPT_MAN_DICT.DEDU_GIST_OS_RESColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEPT_MAN_KEYNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEPT_MAN_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEPT_MAN_KEYNull() {
                this[this.tableDEPT_MAN_DICT.DEPT_MAN_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQC_DATENull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.QC_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQC_DATENull() {
                this[this.tableDEPT_MAN_DICT.QC_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRY_LICENCENull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.RY_LICENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRY_LICENCENull() {
                this[this.tableDEPT_MAN_DICT.RY_LICENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_RY_LICENCENull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_RY_LICENCEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_RY_LICENCENull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_RY_LICENCEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTITLESNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.TITLESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTITLESNull() {
                this[this.tableDEPT_MAN_DICT.TITLESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_TITLESNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_TITLESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_TITLESNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_TITLESColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPOST_TRAINNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.POST_TRAINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPOST_TRAINNull() {
                this[this.tableDEPT_MAN_DICT.POST_TRAINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_POST_TRAINNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_POST_TRAINColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_POST_TRAINNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_POST_TRAINColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCRITERION_INTEGRALITYNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.CRITERION_INTEGRALITYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCRITERION_INTEGRALITYNull() {
                this[this.tableDEPT_MAN_DICT.CRITERION_INTEGRALITYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_CRI_INTNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_CRI_INTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_CRI_INTNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_CRI_INTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMANAGEMENT_SYSTEMNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.MANAGEMENT_SYSTEMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMANAGEMENT_SYSTEMNull() {
                this[this.tableDEPT_MAN_DICT.MANAGEMENT_SYSTEMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_MAN_SYSNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_MAN_SYSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_MAN_SYSNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_MAN_SYSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIMAGE_SYSTEMNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.IMAGE_SYSTEMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIMAGE_SYSTEMNull() {
                this[this.tableDEPT_MAN_DICT.IMAGE_SYSTEMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_IMAGE_SYSNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_IMAGE_SYSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_IMAGE_SYSNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_IMAGE_SYSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPREVENTIVE_MEASURENull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.PREVENTIVE_MEASUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPREVENTIVE_MEASURENull() {
                this[this.tableDEPT_MAN_DICT.PREVENTIVE_MEASUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_PRE_MEANull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_PRE_MEAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_PRE_MEANull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_PRE_MEAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSERVICES_ITEMSNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.SERVICES_ITEMSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSERVICES_ITEMSNull() {
                this[this.tableDEPT_MAN_DICT.SERVICES_ITEMSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_SER_ITEMSNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_SER_ITEMSColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_SER_ITEMSNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_SER_ITEMSColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEMERGENCY_EXAMNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.EMERGENCY_EXAMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEMERGENCY_EXAMNull() {
                this[this.tableDEPT_MAN_DICT.EMERGENCY_EXAMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_EME_EXAMNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_EME_EXAMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_EME_EXAMNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_EME_EXAMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDIAG_REPORTNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DIAG_REPORTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDIAG_REPORTNull() {
                this[this.tableDEPT_MAN_DICT.DIAG_REPORTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_DIAG_RPTNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_DIAG_RPTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_DIAG_RPTNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_DIAG_RPTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMANAGEMENTNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.MANAGEMENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMANAGEMENTNull() {
                this[this.tableDEPT_MAN_DICT.MANAGEMENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_MANAGEMENTNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_MANAGEMENTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_MANAGEMENTNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_MANAGEMENTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsREGISTER_STATNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.REGISTER_STATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetREGISTER_STATNull() {
                this[this.tableDEPT_MAN_DICT.REGISTER_STATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_REG_STATNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_REG_STATColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_REG_STATNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_REG_STATColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOVERSEE_RESULTNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.OVERSEE_RESULTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOVERSEE_RESULTNull() {
                this[this.tableDEPT_MAN_DICT.OVERSEE_RESULTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDEDU_GIST_OS_RESNull() {
                return this.IsNull(this.tableDEPT_MAN_DICT.DEDU_GIST_OS_RESColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDEDU_GIST_OS_RESNull() {
                this[this.tableDEPT_MAN_DICT.DEDU_GIST_OS_RESColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class RY_DIAG_DICTRow : global::System.Data.DataRow {
            
            private RY_DIAG_DICTDataTable tableRY_DIAG_DICT;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RY_DIAG_DICTRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRY_DIAG_DICT = ((RY_DIAG_DICTDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EXAM_ACCESSION_NUM {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.EXAM_ACCESSION_NUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“EXAM_ACCESSION_NUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.EXAM_ACCESSION_NUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_LOCAL_ID {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.PATIENT_LOCAL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“PATIENT_LOCAL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.PATIENT_LOCAL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QC_DATE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.QC_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“QC_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.QC_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_ID {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.PATIENT_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“PATIENT_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.PATIENT_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.PATIENT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“PATIENT_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.PATIENT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PATIENT_SEX {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.PATIENT_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“PATIENT_SEX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.PATIENT_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string STUDY_DATE_TIME {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.STUDY_DATE_TIMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“STUDY_DATE_TIME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.STUDY_DATE_TIMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_NAME {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_SEX {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_SEX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_AGE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_AGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_AGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_AGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_NUMBER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_LOCAL_ID {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_LOCAL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_LOCAL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_LOCAL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_FILM_DATE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_FILM_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_FILM_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_FILM_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_APP_DATE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_APP_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_APP_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_APP_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_CLIN_DIAG {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_CLIN_DIAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_CLIN_DIAG”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_CLIN_DIAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_EXAM_ITEM {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_EXAM_ITEMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_EXAM_ITEM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_EXAM_ITEMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_EXAM_TEC {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_EXAM_TECColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_EXAM_TEC”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_EXAM_TECColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_DESCRIPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_IMPRESSION {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_IMPRESSIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_IMPRESSION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_IMPRESSIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_TRANSCRIBER {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_TRANSCRIBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_TRANSCRIBER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_TRANSCRIBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_APPROVER {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_APPROVERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_APPROVER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_APPROVERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_NAME {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_SEX {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_SEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_SEX”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_SEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_AGE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_AGEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_AGE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_AGEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_NUMBER {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_NUMBERColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_NUMBER”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_NUMBERColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_LOCAL_ID {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_LOCAL_IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_LOCAL_ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_LOCAL_IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_PATH_NO {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_PATH_NOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_PATH_NO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_PATH_NOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_OPE_DATE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_OPE_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_OPE_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_OPE_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_EXAM_ITEM_DIAG {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_EXAM_ITEM_DIAGColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_EXAM_ITEM_DIAG”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_EXAM_ITEM_DIAGColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_OPERATION {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_OPERATIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_OPERATION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_OPERATIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_PATH_DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_PATH_DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_PATH_DESCRIPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_PATH_DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_PATH_DOCTOR {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_PATH_DOCTORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_PATH_DOCTOR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_PATH_DOCTORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string INQ_DOCTOR {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.INQ_DOCTORColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“INQ_DOCTOR”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.INQ_DOCTORColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string QUALITATIVE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.QUALITATIVEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“QUALITATIVE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.QUALITATIVEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string PITCH {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.PITCHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“PITCH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.PITCHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string XR_POSITIVE_RATE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.XR_POSITIVE_RATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“XR_POSITIVE_RATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.XR_POSITIVE_RATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CT_POSITIVE_RATE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.CT_POSITIVE_RATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“CT_POSITIVE_RATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.CT_POSITIVE_RATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MR_POSITIVE_RATE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.MR_POSITIVE_RATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“MR_POSITIVE_RATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.MR_POSITIVE_RATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TOTAL_SCORE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.TOTAL_SCOREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“TOTAL_SCORE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.TOTAL_SCOREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DISTINCTION {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DISTINCTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DISTINCTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DISTINCTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NUMBER_KEY {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.NUMBER_KEYColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“NUMBER_KEY”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.NUMBER_KEYColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DRPT_RPT_DATE {
                get {
                    try {
                        return ((string)(this[this.tableRY_DIAG_DICT.DRPT_RPT_DATEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“RY_DIAG_DICT”中列“DRPT_RPT_DATE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableRY_DIAG_DICT.DRPT_RPT_DATEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEXAM_ACCESSION_NUMNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.EXAM_ACCESSION_NUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEXAM_ACCESSION_NUMNull() {
                this[this.tableRY_DIAG_DICT.EXAM_ACCESSION_NUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_LOCAL_IDNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.PATIENT_LOCAL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_LOCAL_IDNull() {
                this[this.tableRY_DIAG_DICT.PATIENT_LOCAL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQC_DATENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.QC_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQC_DATENull() {
                this[this.tableRY_DIAG_DICT.QC_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_IDNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.PATIENT_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_IDNull() {
                this[this.tableRY_DIAG_DICT.PATIENT_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_NAMENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.PATIENT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_NAMENull() {
                this[this.tableRY_DIAG_DICT.PATIENT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPATIENT_SEXNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.PATIENT_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPATIENT_SEXNull() {
                this[this.tableRY_DIAG_DICT.PATIENT_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSTUDY_DATE_TIMENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.STUDY_DATE_TIMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSTUDY_DATE_TIMENull() {
                this[this.tableRY_DIAG_DICT.STUDY_DATE_TIMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_NAMENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_NAMENull() {
                this[this.tableRY_DIAG_DICT.DRPT_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_SEXNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_SEXNull() {
                this[this.tableRY_DIAG_DICT.DRPT_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_AGENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_AGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_AGENull() {
                this[this.tableRY_DIAG_DICT.DRPT_AGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_NUMBERNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_NUMBERNull() {
                this[this.tableRY_DIAG_DICT.DRPT_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_LOCAL_IDNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_LOCAL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_LOCAL_IDNull() {
                this[this.tableRY_DIAG_DICT.DRPT_LOCAL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_FILM_DATENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_FILM_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_FILM_DATENull() {
                this[this.tableRY_DIAG_DICT.DRPT_FILM_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_APP_DATENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_APP_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_APP_DATENull() {
                this[this.tableRY_DIAG_DICT.DRPT_APP_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_CLIN_DIAGNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_CLIN_DIAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_CLIN_DIAGNull() {
                this[this.tableRY_DIAG_DICT.DRPT_CLIN_DIAGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_EXAM_ITEMNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_EXAM_ITEMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_EXAM_ITEMNull() {
                this[this.tableRY_DIAG_DICT.DRPT_EXAM_ITEMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_EXAM_TECNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_EXAM_TECColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_EXAM_TECNull() {
                this[this.tableRY_DIAG_DICT.DRPT_EXAM_TECColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_DESCRIPTIONNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_DESCRIPTIONNull() {
                this[this.tableRY_DIAG_DICT.DRPT_DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_IMPRESSIONNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_IMPRESSIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_IMPRESSIONNull() {
                this[this.tableRY_DIAG_DICT.DRPT_IMPRESSIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_TRANSCRIBERNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_TRANSCRIBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_TRANSCRIBERNull() {
                this[this.tableRY_DIAG_DICT.DRPT_TRANSCRIBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_APPROVERNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_APPROVERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_APPROVERNull() {
                this[this.tableRY_DIAG_DICT.DRPT_APPROVERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_NAMENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_NAMENull() {
                this[this.tableRY_DIAG_DICT.INQ_NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_SEXNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_SEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_SEXNull() {
                this[this.tableRY_DIAG_DICT.INQ_SEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_AGENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_AGEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_AGENull() {
                this[this.tableRY_DIAG_DICT.INQ_AGEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_NUMBERNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_NUMBERColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_NUMBERNull() {
                this[this.tableRY_DIAG_DICT.INQ_NUMBERColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_LOCAL_IDNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_LOCAL_IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_LOCAL_IDNull() {
                this[this.tableRY_DIAG_DICT.INQ_LOCAL_IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_PATH_NONull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_PATH_NOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_PATH_NONull() {
                this[this.tableRY_DIAG_DICT.INQ_PATH_NOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_OPE_DATENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_OPE_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_OPE_DATENull() {
                this[this.tableRY_DIAG_DICT.INQ_OPE_DATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_EXAM_ITEM_DIAGNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_EXAM_ITEM_DIAGColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_EXAM_ITEM_DIAGNull() {
                this[this.tableRY_DIAG_DICT.INQ_EXAM_ITEM_DIAGColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_OPERATIONNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_OPERATIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_OPERATIONNull() {
                this[this.tableRY_DIAG_DICT.INQ_OPERATIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_PATH_DESCRIPTIONNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_PATH_DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_PATH_DESCRIPTIONNull() {
                this[this.tableRY_DIAG_DICT.INQ_PATH_DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_PATH_DOCTORNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_PATH_DOCTORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_PATH_DOCTORNull() {
                this[this.tableRY_DIAG_DICT.INQ_PATH_DOCTORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsINQ_DOCTORNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.INQ_DOCTORColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetINQ_DOCTORNull() {
                this[this.tableRY_DIAG_DICT.INQ_DOCTORColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsQUALITATIVENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.QUALITATIVEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetQUALITATIVENull() {
                this[this.tableRY_DIAG_DICT.QUALITATIVEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPITCHNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.PITCHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPITCHNull() {
                this[this.tableRY_DIAG_DICT.PITCHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsXR_POSITIVE_RATENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.XR_POSITIVE_RATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetXR_POSITIVE_RATENull() {
                this[this.tableRY_DIAG_DICT.XR_POSITIVE_RATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCT_POSITIVE_RATENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.CT_POSITIVE_RATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCT_POSITIVE_RATENull() {
                this[this.tableRY_DIAG_DICT.CT_POSITIVE_RATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMR_POSITIVE_RATENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.MR_POSITIVE_RATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMR_POSITIVE_RATENull() {
                this[this.tableRY_DIAG_DICT.MR_POSITIVE_RATEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTOTAL_SCORENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.TOTAL_SCOREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTOTAL_SCORENull() {
                this[this.tableRY_DIAG_DICT.TOTAL_SCOREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDISTINCTIONNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DISTINCTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDISTINCTIONNull() {
                this[this.tableRY_DIAG_DICT.DISTINCTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNUMBER_KEYNull() {
                return this.IsNull(this.tableRY_DIAG_DICT.NUMBER_KEYColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNUMBER_KEYNull() {
                this[this.tableRY_DIAG_DICT.NUMBER_KEYColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDRPT_RPT_DATENull() {
                return this.IsNull(this.tableRY_DIAG_DICT.DRPT_RPT_DATEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDRPT_RPT_DATENull() {
                this[this.tableRY_DIAG_DICT.DRPT_RPT_DATEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SternumRowChangeEvent : global::System.EventArgs {
            
            private SternumRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SternumRowChangeEvent(SternumRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SternumRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class KnuckleRowChangeEvent : global::System.EventArgs {
            
            private KnuckleRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KnuckleRowChangeEvent(KnuckleRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public KnuckleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class IVPRowChangeEvent : global::System.EventArgs {
            
            private IVPRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IVPRowChangeEvent(IVPRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public IVPRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class UGIRowChangeEvent : global::System.EventArgs {
            
            private UGIRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UGIRowChangeEvent(UGIRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UGIRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class CTRowChangeEvent : global::System.EventArgs {
            
            private CTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTRowChangeEvent(CTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public CTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MRIRowChangeEvent : global::System.EventArgs {
            
            private MRIRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MRIRowChangeEvent(MRIRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MRIRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class DEPT_MAN_DICTRowChangeEvent : global::System.EventArgs {
            
            private DEPT_MAN_DICTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPT_MAN_DICTRowChangeEvent(DEPT_MAN_DICTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DEPT_MAN_DICTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class RY_DIAG_DICTRowChangeEvent : global::System.EventArgs {
            
            private RY_DIAG_DICTRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RY_DIAG_DICTRowChangeEvent(RY_DIAG_DICTRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RY_DIAG_DICTRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591